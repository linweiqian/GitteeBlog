{"meta":{"title":"前端嚣张农民","subtitle":"","description":"","author":"前端嚣张农民","url":"https://lin-xiuer.gitee.io","root":"/"},"pages":[{"title":"关于博主","date":"2022-12-15T18:09:25.000Z","updated":"2022-12-16T10:30:30.757Z","comments":true,"path":"about/index.html","permalink":"https://lin-xiuer.gitee.io/about/index.html","excerpt":"","text":"个人介绍 97年的处女座老家广东汕头，坐标广东广州，目前临近4年的前端工程师开发 兴趣爱好 摄影、旅游、半个吃货 喜欢研究新奇的东西 目前技术 目前熟练的技术框架主要是vue框架 跨端混合开发主要是uniapp 原生小程序嵌套H5开发 threejs、fabricjs进行3D模型、2DCanvas交互式开发 electron桌面开发 webpack脚手架的搭建 需要熟练的技术 微前端 nodejs vue3+vite typescript 这些后续主要文章会更新这些内容 社交 公众号：前端嚣张农民邮箱:&#49;&#51;&#49;&#54;&#57;&#50;&#x35;&#x37;&#x37;&#50;&#x40;&#x71;&#x71;&#46;&#x63;&#x6f;&#x6d;加群交流vx:Dylan19970902 博客 csdn：https://blog.csdn.net/weixin_40808668?type=blog掘金: https://juejin.cn/user/3131035352311646知乎: https://www.zhihu.com/people/rrskeogithub个人博客:https://linweiqian.github.io/linweiqianBlog/ 座右铭 成功是百分之一的天赋加百分之99的努力！！！"},{"title":"分类","date":"2022-12-15T11:18:59.000Z","updated":"2022-12-16T08:18:16.913Z","comments":true,"path":"categories/index.html","permalink":"https://lin-xiuer.gitee.io/categories/index.html","excerpt":"","text":"分类 vue Typescript"},{"title":"更多","date":"2022-12-15T13:35:35.000Z","updated":"2022-12-17T09:27:03.453Z","comments":true,"path":"more/index.html","permalink":"https://lin-xiuer.gitee.io/more/index.html","excerpt":"","text":"待更新 导航二级菜单 评论系统"},{"title":"标签","date":"2022-12-16T08:17:33.704Z","updated":"2022-12-16T08:17:33.704Z","comments":true,"path":"tags/index.html","permalink":"https://lin-xiuer.gitee.io/tags/index.html","excerpt":"","text":"666 精神可嘉大家快来"},{"title":"sourse","date":"2022-12-16T11:05:52.000Z","updated":"2022-12-16T11:05:52.319Z","comments":true,"path":"sourse/index.html","permalink":"https://lin-xiuer.gitee.io/sourse/index.html","excerpt":"","text":""}],"posts":[{"title":"前端基础面试题","slug":"前端基础面试题","date":"2022-12-16T09:39:56.379Z","updated":"2022-12-16T09:46:59.893Z","comments":true,"path":"2022/12/16/前端基础面试题/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/%E5%89%8D%E7%AB%AF%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/","excerpt":"TCP和UDP的区别tcp是传输控制协议，基于连接协议，给连接对方提供可靠的传输，一个tcp传输需要经过三次握手四次挥手才能建立会话；优点：传输安全，不易丢包缺点：传输效率低udp是用户传输协议，不建立连接，不需要建立会话，直接发送数据，不可靠传输数据；优点：传输效率高缺点：易丢包，传输不安全","text":"TCP和UDP的区别tcp是传输控制协议，基于连接协议，给连接对方提供可靠的传输，一个tcp传输需要经过三次握手四次挥手才能建立会话；优点：传输安全，不易丢包缺点：传输效率低udp是用户传输协议，不建立连接，不需要建立会话，直接发送数据，不可靠传输数据；优点：传输效率高缺点：易丢包，传输不安全 什么是语义化标签，为什么要语义化什么是：旨在让标签有自己的含义。为什么：1),.即使在没有CSS样式的条件下，也能很好地呈现出内容结构、代码结构；2).语义化HTML会使HTML结构变的清晰，有利于维护代码和添加样式；3).方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以意义的方式来渲染网页；4).提升搜索引擎优化(SEO)的效果。和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：5).爬虫依赖于标签来确定上下文和各个关键字的权重；6).便于团队开发和维护，语义化更具可读性，是下一步吧网页的重要动向，遵循W3C标准的团队都遵循这个标准，可以减少差异化。7).通常语义化HTML会使代码变的更少，使页面加载更快。 清除浮动，什么时候需要清除浮动，清除浮动都有哪些方法；什么时候？对元素进行了浮动(float)时，我们的元素就会脱离文档流；方法？方法一：添加新的元素 应用 clear：both； 方法二：父级div定义 overflow: auto 方法三： 据说是最高大上的方法 :after 方法 JavaScript有哪几种数据类型？基本数据类型1).字符串’String’;2.数字Number；3布尔’Boolean‘引用数据类型1).数组’Array‘2).对象’Object‘特殊数据类型1).空对象null2).未定义Undefined 行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素：a b span img input select strong块级元素：div ul li ol dl dt dd h1 p空元素：&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt; Label的作用是什么？如何使用？作用：Label标签是用来定义表单控制间的关系使用：当用户选择该标签时，浏览器会自动将焦点转到和标签相关的表单内容上 HTML5 为什么只需要写 ？告知浏览器的解析器用什么文档标准解析这个文档 一个CSS文件如果过大的话，加载会很慢，占用过大带宽，如果解决？1.去除空格和换行,压缩css代码;2.尽量使用简写, 缩减代码;3.将css文件分成多个文件 标签的隐藏（display:none和visibility:hidden）的区别？display:none是彻底消失，不在文档流中占位，浏览器也不会解析该元素；visibility:hidden是视觉上消失了，可以理解为透明度为0的效果，在文档流中占位，浏览器会解析该元素； input中disabled与readonly有何区别？1）、Readonly只针对input(text &#x2F; password)和textarea有效，而disabled对于所有的表单元素都有效，2）、但是表单元素在使用了disabled后，当我们将表单以POST或GET的方式提交的话，这个元素的值不会被传递出去，而readonly会将该值传递出去（readonly接受值更改可以回传，disable接受改但不回传数据）。 a标签的四个伪类是什么？如何排序？为什么？（link,visited,hover,active）为了产生预期的效果，在 CSS 定义中，a:hover 必须位于 a:link 和 a:visited 之后 !为了产生预期的效果，在 CSS 定义中，a:active 必须位于 a:hover 之后！ 使用display:inline-block在IE6中不能正常显示，如何解决？1.如果先定义了 display:inline-block，然后再将 display 设回 inline 或 block，2.直接让块元素设置为内联对象呈递，然后触发块元素的 layout img的alt和title有什么区别？1)、alt是在图片不能正常加载时候显示的提示语，2)、title属性是鼠标划上去显示的内容 css样式引用和js引入的位置问题（为什么会放在头部或者底部）。因为页面在加载时，css加载时可以并发请求的（同页面中的图片，ie6除外），而js加载时需要等待一个js文件加载完成后才加载其他资源，为了页面的快速呈现，放置在尾部效果更好 某种效果，有两种实现方案都可以实现， 方案一：标签； 方案二：背景图， 两个方案如何取舍？衡量的标准是什么? 如果图像是内容的一部分或图表或人，使用img标签加上alt属性 如果你想打印页面并且你想要的图像包含默认情况下使用img 使用img（alt文本）图像有一个重要的语义化时 div+css与table布局的有何区别？1).符合W3C标准，代码结构清晰明了，结构、样式和行为分离，带来足够好的可维护性。2).布局精准，网站版面布局修改简单。3).加快了页面的加载速度（最重要的）。4).节约站点所占的空间和站点的流量。5.用只包含结构化内容的HTML代替嵌套的标签，提高另外搜索引擎对网页的搜索效率。 table的合并边框属性是什么？跨行是什么？跨列是什么？合并边框“cellspacing” 跨行“rowspan”跨列“colspan” split() join()的区别在哪？1).join()函数获取一批字符串，然后用分隔符字符串将它们连接起来，从而返回一个字符串。2).split()函数获取一个字符串，然后在分隔符处将其断开，从而返回一批字符串。 数组方法pop() push() unshift() shift()的区别在哪？push()是用来在数组末端添加项，shift()在移除数组的第一个项pop()在数组末端移除项，unshift()在数组前端添加项。 JavaScript的事件流模型都有哪些？“事件冒泡”：事件开始由最具体的元素接收，然后逐级向上传播“事件捕捉”：事件由顶层的dom开始向下传递，在底层最具体的元素接收“事件委托”：当事件响应到需要绑定的元素上时，会通过事件冒泡机制从而触发它的外层元素的绑定事件上，然后在外层元素上去执行函数。 请按要求操作数组a： i. 如何删除数组a中第2个元素（即：“B”）？ a.splice(1,1) ii. 如何删除数组a中最后一个元素？ a.pop() iii. 如何将“NEW”插入数组a的“B”和“C”之间？ a..splice(2,0,NEW); 请你谈谈Cookie的弊端a. 每个特定的域名下最多生成的cookie个数有限制b. 安全性问题。如果cookie被人拦截了，那人就可以取得所有的session信息。c.有些状态不可能保存在客户端。d. cookie存储字段小，为了兼容性，一般不能超过4K 请说出三种减少页面加载时间的方法a. 压缩合并Javascript、CSS代码b.Javascript脚本放在文件末尾c. 服务器开启gzip压缩d.网址后加斜杠e.减少http请求 列举IE与其他浏览器不一样的特性？1)IE支持currentStyle2)IE使用innerText;3)滤镜方面：IE：filter:alpha(opacity&#x3D; num4)事件方面：attachEvent5)鼠标位置：IE是event.clientX;6)IE使用event.Element;7)IE中消除list的原点仅需margin:0即可达到最终效果 前端页面有哪三层构成，分别是什么？作用是什么？1)结构层，表现层，行为层2作用：a. 结构层：由 HTML 或 XHTML 之类的标记语言负责创建，仅负责语义的表达。解决了页面“内容是什么”的问题。b. 表示层：由CSS负责创建，解决了页面“如何显示内容”的问题。c. 行为层：由脚本负责。解决了页面上“内容应该如何对事件作出反应”的问题。 函数里的this什么含义，什么情况下，怎么用。1）this是一个关键词，它始终指向一个对象，this像是一个指针。2） 情况一：纯粹的函数调用 情况二：作为对象方法的调用 情况三： 作为构造函数调用 什么是闭包,闭包的特性、作用闭包：闭包是指有权访问另一个函数作用域中变量的函数作用：1）能够读取函数内部的变量 2）这些变量长期保存在内存中，不会在外部函数调用后清除特性：1）函数套函数 2）内部函数可以直接使用外部函数的局部变量或参数 3)变量或参数不会被垃圾回收机制回收 undefined和 null 区别1）类型不同2）转化出的值不同3）含义不同：undefined：表示使用var声明变量但没有初始化null：是个空指针对象 jQuery库中的 $ ()是什么?就是jquery对象，$()就是jQuery()，在里面可以传参数，作用就是获取元素 jQuery中，如何阻止事件冒泡和浏览器默认行为？1）阻止冒泡用stopagation2）阻止浏览器默认行为用preventDefault 怎样添加,移除,移动,复制,创建和查找节点?1）添加用appendChild（）2）移除用removeChild（）3）移动用cloneNode() removeChild() insertBefore()4）复制用cloneNode()5）创建用createElement(),createTextNode()6）查找用getElementsByTagName() getElementsByClassName() getElementById() 什么叫优雅降级和渐进增强？1)优雅降级：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。2)渐进增强：针对低版本浏览器构建页面，保证最基本的功能，然后在针对高级浏览器进行效果，交互等改进和追加功能达到最好的效果 Javascript中的定时器有哪些？他们的区别及用法是什么？1）setTimeout(),setInterval()区别：setTimeout调用一次,setInterval反复调用用法：都可以传入两个参数，一个函数名，另一个为毫秒数 innerHTML和outerHTML有什么区别1）innerHTML: 从对象的起始位置到终止位置的全部内容,不包括Html标签。2）outerHTML: 除了包含innerHTML的全部内容外, 还包含对象标签本身。 浏览器的标准模式和怪异模式究竟是什么？ a）标准模式：是浏览器按照W3C标准解析执行代码，这样用规定的语法去渲染，就可以兼容各个浏览器，保证以正确的形式展示网页。 b）怪异模式：是使用浏览器自己的方式解析执行代码，因为不同浏览器解析执行的方式不一样，所以我们称之为怪异模式。 JQuery链式写法原理 答：jq的链式调用是通过return this的形式来实现的。通过对象上的方法最后加上return this，把对象再返回回来，对象就可以继续调用方法，实现链式操作了。如果需要链式的处理，只需要在方法内部返回当前的这个实例对象this就可以了，因为返回当前实例的this，就又可以访问自己的原型了。 $(document).ready() 是个什么函数？为什么要用它？ 答：该函数会按照注册（绑定）的顺序一次执行，是事件模块中最重要的一个函数，可以极大的提高Web应用程序的响应速度，jQuery就是用(document).ready()方法来代替传统的JS的window.onload方法的 JavaScript window.onload 事件和 jQuery ready 函数有何不同？ 答：前者除了要等待 DOM 被创建还要等到包括大型图片、音频、视频在内的所有外部资源都完全加载。如果加载图片和媒体内容花费了大量时间，用户就会感受到定义在 window.onload 事件上的代码在执行时有明显的延迟。 另一方面，jQuery ready() 函数只需对 DOM 树的等待，而无需对图像或外部资源加载的等待，从而执行起来更快。使用 jQuery $(document).ready() 的另一个优势是你可以在网页里多次使用它，浏览器会按它们在 HTML 页面里出现的顺序执行它们，相反对于 onload 技术而言，只能在单一函数里使用。鉴于这个好处，用 jQuery ready() 函数比用 JavaScript window.onload 事件要更好些。 $(this) 和 this 关键字在 jQuery 中有何不同? a、this表示js的dom对象 b、$(this)表示的是用jquery封装好的当前对象,可以使用jquery提供的方法访问样式 px、em、rem的区别 px: 像素px是相对于显示器屏幕分辨率而言的 em会继承父级元素的字体大小 rem会继承html元素的字体大小 js页面生命周期 DOMContentLoaded, 浏览器完成HTML的加载, 并构建DOM树,但是css和img等外部资源尚未加载完成。注意：这里的外部资源指的是需要发送http请求获得的资源，而不是自己文件中的资源 load, 浏览器加载完所有资源, 包括HTML文档, 图片, 样式等 beforeunload, 用户即将离开, 用来检查用户是否保存了修改, 并询问是否真的要离开 unload, 用户几乎已经离开, 但是可以启动一些操作, 比如发送统计数据 有关css属性position的属性值的描述 static：没有定位，元素出现在正常的流中，占据文档流空间 fixed：生成固定定位的元素，相对于浏览器可视窗口进行定位，不占据文档流空间 relative：生成相对定位的元素，相对于元素本身正常位置进行定位，占据文档流空间 absolute：生成绝对定位的元素，相对于static定位以外的第一个含有(relative, absolute, fixed, sticky)的祖先元素定位，不占据文档流空间 sticky: 黏贴定位，相对于浏览器可视窗口进行定位，占据文档流空间 主流浏览器、内核 、内核构成以及作用 IE * trident Firefox(火狐) * gecko Safari(苹果) * webkit Chrome(谷歌) * webkit * blink (blink是webkit内核一个分支) Opera(欧朋) * presto * webkit (2013改为webkit) 内核构成: 渲染引擎：负责渲染HTML、CSS、图片等信息，然后输出到显示器 js引擎: 负责解析javascript脚本，实现页面动态效果 css具有继承属性 color, text-align, line-height, font-size, font-weight, font-style, font-family, white-space, text-indent, text-decoration, text-transform等等 &#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D;，null 和 undefined的区别 ==: 值相等，类型可以不同 ===: 值相等且类型相同 null: 表示暂且空值，未来有值，一般用于释放引用类型数据 undefined: 表示未定义，一般是指一个变量只是生声明而没有赋值 css优先级分配 含有!important的css的优先级最高 在相同选择器精度情况下： id选择器的优先级 &gt; class选择器大 &gt; 元素选择器 内联样式 &gt; 内部样式 内联样式 &gt; 外部样式 HTML、XHTML、XML、HTML5区别 HTML: 超级文本标记语言，标签对大小写不敏感 XHTML: 严格的HTML，标签必须小写，标签必须闭合，标签必须嵌套正确 XML: 可扩展的标记语言，标签可以自定义，比如 &lt;car&gt;&lt;/car&gt; HTML5: HTML4.0.1升级版 行内元素，行内块元素，块级元素的区别以及标签嵌套规范 行内元素: 不占满整行，不可以直接使用css设置宽度和高度，比如 a, i, span, b, strong, del, s等等 行内块元素: 不占满整行，可以直接使用css设置宽度和高度，比如 button, img, input, textarea, select等等 块级元素: 占满整行，可以直接使用css设置宽度和高度，比如 div, p, h1-h6, ul, ol, li, form等等 标签嵌套规范 行内元素可以嵌套行内元素 块级元素可以嵌套块级元素、行内块元素、行内元素 p元素不能嵌套p元素，p元素不能嵌套h系列的元素，h系列的元素不能嵌套h系列的元素 面向对象以及原型 面向对象 将需求抽象成一个对象，然后对其成员进行分析 面向对象三大特征 封装、继承、多态 面向对象的第一步是创建构造函数，第二步通过构造函数创建对象实例 原型： 对象的属性和方法，有可能是定义在自身，也有可能是定义在它的原型对象，由于原型本身也是对象，又有自己的原型，所以形成了一条原型链。 函数的原型是 prototype 对象的原型是 __proto__ 对象的顶级原型为null， 即Object.prototype.__proto__ == null 外边距合并 在垂直方向，两个元素相遇，会发生外边距合并，合并时取最大外边距 对于父子元素外边距合并 如果父级元素没有内边距和边框，此时设置子元素的外边距，该外边距会和父元素的外边距发生合并 解决方法： 父元素设置边框 父元素设置内边距替换子元素的外边距 对于同级元素外边距合并 在垂直方向, 前一个元素设置margin-bottom,后一个设置margin-top, 此时两个元素会发生外边距合并 解决方法: 只设置元素最大值的外边距 a元素和label元素的作用 对于a元素 下载，跳转站外链接，跳转站内链接，回到顶部，锚点 对于label元素 label一般配合表单控件使用 使用label元素包裹的表单控件，点击label任何一个范围，相当于点击表单控件 使用label的for属性关联表单控件的id，点击label任何一个范围，相当于点击表单控件 判断数组六大方法 arr.constructor === Array arr instanceof Array Array.isArray(arr) Array.prototype.isPrototypeOf(arr) Object.getPrototypeOf(arr) === Array.prototype Object.prototype.toString.call(arr) === &#39;[object Array]&#39; CSS的盒子模型 盒子模型的组成：内容(content)、内边距(padding)、边框(border)、外边距(margin) 内边距位于内容和边框之间，一般用于隔离内容，内边距可以填充背景色 外边距位于盒子和盒子之间，一般用于隔离盒子，使得盒子与盒子有一定的间距 边框位于内边距和外边距之间 js数据类型 js数据类型分为原始数据类型和引用数据类型 原始数据类型 number, string, boolean, null, undefined, symbol 引用数据类型 function, array, object $(function() {}) 和 window.onload区别 window.onload是在页面所有的元素都加载完成后才触发 $(function(){})是在页面的dom结构加载完毕后就触发dom里的内容不一定都已经加载完成 内部插入节点和外部插入节点 内部插入节点，节点关系为父子关系 在父节点尾部添加一个子节点 父节点.append(子节点) 子节点.appendTo(父节点) 在父节点顶部添加一个子节点 父节点.prepend(子节点) 子节点.prependTo(父节点) 外部插入节点，节点关系为同胞节点 在节点前面添加节点 节点1.before(节点2); 节点2.insertBefore(节点1); 在节点后面添加节点 节点1.after(节点2); 节点2.insertAfter(节点1); &#x3D;&#x3D; 和 &#x3D;&#x3D;&#x3D;，null 和 undefined的区别 ==: 值相等，类型可以不同 ===: 值相等且类型相同 null: 表示暂且空值，未来有值，一般用于释放引用类型数据 undefined: 表示未定义，一般是指一个变量只是生声明而没有赋值 瀑布流实现原理 先取第一行元素的高度为基准高度， 从第二行开始，在基准高度找出最小高度值，将下一个元素放在最小高度对应的元素的下面，元素完成位置设置后，将基准高度的最小高度重置为元素高度和最小高度之和 $.extend 和 $.fn.extend的区别 $.extend 如果只传递一个对象，表示在jQuery构造函数扩展属性和方法，jquery实例不能使用，只能jQuery构造函数本身使用 如果传递两个对象以上的，表示合并对象，并返回合并之后的对象 如果第一个参数为true，其他参数为对象时，则表示深度合并对象，并返回合并之后的对象 $.fn.extend 表示在jQuery构造函数的原型prototype扩展属性和方法, jquery实例能使用, jQuery构造函数本身不能使用 重绘和回流 重绘 当页面的元素需要更新属性，新的属性对元素的外观，风格的产生影响，这个更新的过程称为重绘 比如设置元素的background，color等等，都会重绘元素 回流 当页面的元素因为尺寸，位置、布局，隐藏等改变而需要浏览器重新构建的过程，这个重构的过程称为回流 比如设置元素的width，height，float，position等等，都会回流元素 display: none; 和 visibility: hidden;的区别 共同点：都是隐藏元素 不同点: 对于display: none;隐藏的元素不会占据文档流；visibility: hidden;隐藏的元素仍会占据文档流 浏览器的渲染页面机制 浏览器解析HTML文档和CSS样式表构建DOM树和和CSSDOM树(没有设置节点外观样式) 浏览器结合DOM树和CSSOM树构建渲染树(重绘元素) 浏览器在渲染树内对每个渲染元素进行布局处理，计算出每一个元素的大小和位置(回流元素) 遍历渲染树将实际的像素显示到屏幕(确认最终的回流元素样式) 加载优化 懒加载可视区域的数据 依赖的下载路径是否可靠，不可用时候是否会阻碍整个页面 脚本放在body结束标签之前执行 压缩html、图片、样式表、js 保证图片正常浏览时，图片分辨率要尽可能小 字体图标替换图片 css选择器尽量不要超过四个层级，由于css选择器越复杂，浏览器计算得越久 尽量减少js对DOM操作 bootstrap4响应式断点范围 超大PC xl: x &gt;= 1200px pc lg: x &gt;= 992px 平板 md: x &gt;= 768px 手机或者手机横屏 sm: x &gt;= 576px 超小屏幕手机: x &lt; 576 什么是XSS攻击 XSS(cross site script): 跨站脚本攻击 原理: 恶意攻击者往web页面插件恶意的HTML代码, 当用户浏览网页时, 嵌入恶意的html代码就会被执行 实现原理: 通过站内交互途径, 比如发布评论, 提交含有javascript的内容文本, 如果前端和服务器没有过滤或者没有转义这些脚本, 作为内容发布到网页上, 其他用户访问这个页面时会执行这些脚本, 从而被攻击 目的: 通过插入恶意脚本, 实现对用户浏览器的控制, 获取用户信息 怎样防止XSS攻击 输入过滤(长度验证, 格式验证) 输出转义(html转义编码) 将重要的cookie标记httponly, 避免XSS攻击利用javascript的document.cookie获取cookie 其中具有httponly标记的cookie无法获取，增强cookie的安全性 有关css属性position的属性值的描述 static：没有定位，元素出现在正常的流中，占据文档流空间 fixed：生成固定定位的元素，相对于浏览器可视窗口进行定位，不占据文档流空间 relative：生成相对定位的元素，相对于元素本身正常位置进行定位，占据文档流空间 absolute：生成绝对定位的元素，相对于static定位以外的第一个含有(relative, absolute, fixed, sticky)的祖先元素定位，不占据文档流空间 sticky: 黏贴定位，相对于浏览器可视窗口进行定位，占据文档流空间 前端如何定跳页面 利用a标签的href属性跳转页面 使用location跳转页面，跳转方式有三种 location.href location.assign() localtion.replace() 加载优化 懒加载可视区域的数据 依赖的下载路径是否可靠，不可用时候是否会阻碍整个页面 脚本放在body结束标签之前执行 压缩html、图片、样式表、js 保证图片正常浏览时，图片分辨率要尽可能小 字体图标替换图片 css选择器尽量不要超过四个层级，由于css选择器越复杂，浏览器计算得越久 尽量减少js对DOM操作 目前主流浏览器 IE 内核 ：tridentFirefox 内核：geckoSafari (苹果) 内核：webkitOpera（欧朋） 内核:webkitChrome (谷歌) 内核:webkit内核构成：渲染引擎：负责渲染HTML,CSS,图片 等信息，然后输出显示器js引擎：负责解析JavaScript脚本，实现页面动态效果 get请求和post请求的区别 get传输数据的速度快，安全性低 post传输速递低，安全性高 Sass、LESS 是什么？大家为什么要使用他们？共同点：他们是CSS的预处理器，是CSS上的抽象层，是一种特殊语法，语言编译成CSS;Less:是一种动态样式语言，将CSS设置成动态语言的属性，既可以在客户端运行，也可以在服务端运行；Sass:为什么使用？a.结构清晰，便于扩展。b.可以方便地屏蔽浏览器私有语法差异。这个不用多说，封装对浏览器语法差异的重复处理，减少无c.意义的机械劳动。d.可以轻松实现多重继承。e.完全兼容 CSS 代码，可以方便地应用到老项目中。LESS 只是在 CSS 语法上做了扩展，所以老的 CSS 代码也可以与 LESS 代码一同编译。 为什么要用面向对象？1.便于项目的维护，拓展更新2.可以实现属性和方法的继承3.提高网页应用程序的性能，节省内存空间 什么是对象？属性和方法的集合，属性和方法是对象的成员 js面向对象创建对象的几种方式：1.直接量定义对象2.工厂模式定义对象优点：解决看创建相似对象的问题，缺点：不能识别对象类型3.构造函数定义对象优点：创建自定义函数介意将它的实例标识为一种特定的类型缺点：每个方法都要重新实例一遍4.原型定义对象优点：可以让所有的对象实例共享它所包含的属性和方法缺点：原型中的所有属性都是共享的，但是实例一般都要有自己单独属性的5.混合模型 三种方式定义一个函数1.var fn1&#x3D; new Function(‘代码块’);&#x2F;&#x2F;调用fn1()2.var fn2 &#x3D;function(){代码块}；fn2()3.function fn3(){代码块}；fn3（）自执行函数(function(){代码块})（）回调函数特点：把一个函数作为实参传递到另一个函数再调用function fn1(callback){callback();}fn1(function(data){代码块}) CSS中link和@import的区别是？1.lin属于HTML标签，而@import是CSS提供的2.link是标签没有兼容性问题，而@import需要ie5以上浏览器3.页面被加载时，link标签被同时加载，而@import需要页面加载完再加载4.link标签方式的权重高于@import 为什么要初始化样式？由于兼容问题，不同浏览器对标签的默认样式值不同，若不初始化会造成不同浏览器之间的显示差异 BFC是什么？独立的布局环境，其中的元素不受外界的影响，并在一个BFC中，块盒和行盒都会垂直沿其父元素的边框排列 对 WEB 标准以及 W3C 的理解与认识W3C可分为结构层，行为层和表现层，而WEB标准是让三者独立，让其具有模块化W3C对web标准提出了规范化1.对于结构：a.标签要闭合b.标签要小写c.标签不能随意嵌套2.对于表现和行为：a.尽量使用外链CSS和JS，符合规范提高渲染速度b.不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性 作用域，作用域链？a.作用域：就是变量与函数的可访问范围。作用域分为 全局作用域(所声明的变量全局都可以访问),局部作用域(所声明的变量只在其内部可以访问)。b.作用域链：当我们在一个函数内部访问当前作用域内不存在的变量时，就会逐层向外查找，如果一直找不到就会报错。当我们在局部作用域中，调用外部变量时，就产生了作用域链。 JavaScript的三种强制转化类型ParseInt()将一个字符串转化成一个整数ParseFloat（）将一个字符串转化成一个浮点数Number（）将变量转化成数值型 ajax的理解？ajax的原理：原理：相当于在用户和服务器之间加一个中间层（ajax引擎),使用户操作与服务器响应异步化。ajax的优点：在不刷新整个页面的前提下与服务器通信维护数据。不会导致页面的重载可以把前端服务器的任务转接到客服端来处理，减轻服务器负担，节省宽带。ajax的劣势：对搜索引擎的支持比较弱；不容易调试。解决办法：通过location.hash值来解决Ajax过程中导致的浏览器前进后退按键失效 列举浏览器对象模型 BOM 里常用的至少 4 个对象，并列举 window 对象的 常用方法至少5个对象：window document location screen history navigator方法：alert() confirm() prompt() open() close() setInterval() setTimeout() clearInterval() clearTimeout() 如何阻止事件冒泡和默认事件 ：a.阻止冒泡事件：e. stopPropagation();&#x2F;&#x2F;标准浏览器b.阻止默认事件：e.preventDefault(); javascript 的本地对象，内置对象和宿主对象a.本地对象：array obj regexp 等可以 new 实例化b.内置对象：gload Math 等不可以实例化的c.宿主对象:浏览器自带的 document,window Sass和Less的区别只要区别是他们的实现方式不同LESS是基于javaScript运行,所以LESS是在客户端处理，Sass是基于Ruby的，在服务端处理的，很多开发者不选择LESS是因为LESS输出修改过的CSS浏览器需要依赖JavaScript引擎，而JavaScript引擎需要额外的时间处理代码 JQuery是什么？特点，优缺点？什么是jQuery：1.jQuery是一个优秀的JavaScript框架2.是一个轻量级的js库，简洁的js库，能使用户更方便的处理dom，event，实现动画效果，并且方便为网站提供ajax交互特点：1.一款轻量级的js框架2.丰富的dom选择器3.链式表达式4.事件。样式。动画支持5.ajax操作支持6.跨浏览器兼容7.插件扩展开发8.可拓展性强优点：1.实现脚本与页面分离2.最少代码做最多的事情3.性能支持比较好缺点：1.不能向后兼容2.插件的兼容性3.使用多个插件容易发生冲突 网络七层协议：1.应用层2.表示层3.会话层4.传输层5.网络层6.数据链路层7.物理层 js的常用内置对象1.array数组对象2.string字符串3.math对象4.Date日期对象 js堆栈含义：都是运行时内存分配的一个数据区，因此也被称为堆区和栈区区别：二者存储的数据类型和处理速度不同1.堆用于复杂引用数据类型分配空间，存储速度慢；2.栈主要用于存放基本数据类型，存储速度快； 垃圾回收机制1.标记清除：当变量进入执行环境时，变量标记为进入环境，当离开环境时，标记为离开环境，2.引用计数：引用计数的含义是跟踪记录每个值被引用的次数，当声明一个变量并将一个引用类型赋值给该变量时，这个值的引用次数就是1，相反，如果包含对这个值引用的变量又取得另外一个值，则这个值引用次数就-1； js由三部分组成ECMAscript：它是js语言的标准，规定了js的编程语法和基础核心知识dom：文档对象模型，提供给js很多操作页面中元素的属性和方法bom：浏览器对象模型，提供给很多操作浏览器的属性和方法，而这些方法都放在window浏览器对象下 Promise是什么是一种异步编程的解决方案，从语法上看，Promise是一个对象，它可以获取异步操作的消息，从本意上看他是一种承诺，承诺一段时间会给你一个结果 同步加载与异步加载？同步模式：又称阻塞模式，会阻止浏览器的后续处理，停止后续的解析，只有当前加载完成，才能进行下一步操作。所以默认同步执行才是安全的。但这样如果js中有输出document内容、修改dom、重定向等行为，就会造成页面堵塞异步加载：又叫非阻塞加载，浏览器在下载执行js的同时，还会继续进行后续页面的处理 Promise的作用？是一个对象，用来传递异步操作的消息，提供统一的api，可供进一步处理 vuex的五个属性有哪些（状态管理模式）1.state：基本数据 （mapState辅助函数）2.getters：从基本数据派生的数据3.mutations：提交更改数据的方法4.actions：像一个装饰器，包裹mutations，使之可以异步5.mudules：模块化vuex vue的虚拟dom 是什么是js模拟dom结构，利用虚拟dom最后的状态去操作dom 常见的八大数据结构：数组栈队列链表树图字典树（这是一种高效的树形结构，但值得单独说明）散列表（哈希表） foreach和map的区别foreach返回的是一个undefinedmap返回的是一个新数组 nodejs的优缺点：优点：高并发 适合I&#x2F;O密集型缺点：不适合CPU密集型应用 只支持单核CPU 可靠性低适合场景：RESTful API 统一web应用的UI层 大量的ajax请求的应用 页面导入样式时，使用link和@import有什么区别？1.link属于XHTML标签，除了加载css外，还能定义rel链接起作用，而@import是css提出的只能加载css2.页面被加载时，link会被同时加载，而@import引用的css需要页面加载完再加载3.@import需要IE5以上才能识别，而link无兼容问题 原型是什么？在JavaScript中原型是一个prototype对象，用于表示类型之间的关系。原型链是什么？在JavaScript中是通过prototype对象指向父类对象，直到指向Object对象为止，这样就形成了一个原型指向的链条，专业术语称之为原型链。 什么是虚拟DOM？使用js对象模拟DOM，在操作过程中不会直接操作DOM，等待虚拟DOM操作完成，仅仅比较开始和结束状态虚拟DOM有哪些变换，最终根据结束状态虚拟DOM去操作DOM。 Vue相对于jQuery在开发上有什么优点 a.Vue比JQuery减少了 DOM 操作 b.组件化模式，开发效率高,方便维护 jsonp原理？使用script标签的src属性，利用get方式请求后台数据，将数据以参数的形式返回 怎样避免全局变量污染？ a.尽量少使用全局变量 b.使用闭包 Vue数据双向绑定的原理及其实现原理是根据数据劫持和订阅者模式实现过程是监听器，观察者和解析器 MVC与MVVM的理解MVC视图层（View）：主要是用户界面的展示控制层（Controller）：主要是处理Model层和View层的交互模型层（Model）：主要是对数据的CRUD操作辑的处理。 MVVM 视图层（View）：调用ViewModel的方法并响应变化。 视图模型层（ViewModel）：主要做业务的调度者，分割了View层和Model层。 模型（Model）：数据模型 GET、POST的区别？ a.get是从服务器上获取数据，post是向服务器传送数据。 b.get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制 c.get安全性非常低，post安全性较高。 socket与web socket的区别？ Socket是传输控制层协议，WebSocket是应用层协议。 什么是深拷贝，什么是浅拷贝深拷贝是两个对象在同一个内存空间，如果一个改变另一个会开辟新的内存空间，不受影响浅拷贝是两个对象，如果一个改变，另一个也会发生改变 请讲述sessionStorage、localStorage、cookie的区别？⒈localStorage长期存储数据，浏览器关闭数据后不丢失； ⒉sessionStorage数据在浏览器关闭后自动删除； ⒊cookie是网站为了标识用户身份而存储在用户本地终端（Client Side）上的数据（通常经过加密）。cookie始终在同源的http请求中携带（即使不需要）都会在浏览器和服务器端间来回传递。session storage和local storage不会自动把数据发给服务器，仅在本地保存； ⒋存储大小：cookie数据大小不会超过4K，session storage和local storage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或者更多； 如何解决浏览器兼容问题? 另外请详细讲述CSS hack。可以通过初始化样式csshack是通过不同css 代码在不同浏览器中兼容相同效果 讲一下 prototype 是什么东西，原型链的理解，什么时候用 prototypeprototype是js的对象由属性和方法组成原型链是每个prototype对象指向父级对象，最终指向Obeject产生的原型链条 js中call(),apply(),bind()方法的区别call()和apply()第二个传入的参数不同，call()传入的是字符串，apply()传入的是数组bind()传参方式与call()相同，只不过call()和apply()调用后会立即执行，而bind()还需要再调用才会执行 什么是事件委托，它的作用？就是讲子元素的事件，放在父元素去处理，他是原理是事件冒泡的实现作用:减少for循环优化性能，减少内存 什么是函数防抖？在单位时间内函数只执行最后一次，如果多次触发，则重新计算延迟时间应用场景：表单提交，输入框验证，搜索框 什么是函数节流？在单位时间内多次触发一段时间只一次函数执行应用场景:dom元素的多次拖拽或滚动，抢购 什么重绘和回流？重绘：当页面元素样式改变，不影响元素在文档流中的位置回流：当操作的改变响应文档内容或者元素在文档流中的位置发生改变优化：减少dom操作将样式放在head标签下而脚本放在body结束后简洁优化css样式 事件冒泡和事件捕获的区别？事件冒泡是给子元素绑定事件并触发时，父元素也会跟着触发事件捕获是用addeventlistener（）绑定并触发子元素时，先触发父元素再传递给子元素 什么堆栈？它们的区别 堆主要存储引用数据类型，存放速度比较慢栈主要存储基本数据类型，存取速度比较快 区别：栈存储的是局部变量，堆存放的是实体栈的存放速度比堆快栈存放的变量生命周期结束就会被摄放，而堆会不定时被垃圾回收机制回收 什么是路由守卫？路由守卫是路由跳转时被验证，通常用于登录验证传入的参数有to(到哪个页面),from(从哪个页面来),next(回调函数) 请描述下你对vue框架的理解？vue是一套用于构建用户界面的渐进式框架特性：轻量级框架 双向数据绑定 插件化优点：轻量高性能组件化的MVVM库，容易上手缺点：不支持IE8 性能不如react和angular var let const区别? var的声明一般在全局作用域,会有变量提升,会造成变量污染 let的声明一般在块级作用域,不存在变量提升,形成暂时性死区,不能重复声明 const的声明一般在块级作用域,形成暂时性死区,不能重复赋值,原因是对简单数据类型的值保存在内存地址,而复杂的数据类型保存的是指向实际数据的内存地址 promise是什么? 作为异步编程操作,解决回调地狱,有三个参数,padding(进行中),fulfilled(已成功),rejected(已失败),一旦执行无法中途取消 Promise.prototype.then()等待上一个promise状态改变返回新的promise实例 Promise.prototype.catch()用于指定发生回调函数异步执行的错误 Promise.prototype.try()用于指定发生回调函数同步执行的错误 Promise.prototype.finally()不管 Promise 对象最后状态如何，都会执行的操作 Promise.all()方法用于将多个 Promise 实例，包装成一个新的 Promise 实例,一个执行失败则不会继续执行 Promise.race() 多个相同数据的接口哪个获取快,就先获取哪个的结果 Promise.allSettled()不管每一个操作是成功还是失败，再进行下一步操作 Promise.any()只要参数实例有一个变成fulfilled状态，包装实例就会变成fulfilled状态；如果所有参数实例都变成rejected状态，包装实例就会变成rejected状态。 async&#x2F;await是什么?promise和Generater的语法糖,await必须放在async里面好处:1.简介,使异步代码看起来像同步代码 2.async&#x2F;await 让 try&#x2F;catch可以同时处理同步和异步的错误 箭头函数与普通函数的区别 1.普通函数存在变量提升的现象 2.箭头函数不能作为构造函数使用,没有new对象 3.两者this的指向不同,普通this指向绑定的事件,箭头函数的this指向所处环境的上下文,如果没有上下文指向最外层的对象window Map和Set的区别? 1.Map保存键值对，任何值都可以作为键值的值。 2.Set保存的是类数组数据，是值的集合。 3.Map有get方法而Set没有get方法 原型和原型链的理解? 原型:每个函数都有prototype属性,该属性指向原型对象;使用原型对象的好处是所有对象实例共享它所包含的属性和方法 原型链:每个对象都有个原型对象,通过_proto_指针指向原型对象,并从中继承方法和属性,同时原型对象也有原型,这样一层一层最终指向null 原型的作用： 1.数据共享 节约内存内存空间 2.实现继承","categories":[{"name":"八股文","slug":"八股文","permalink":"https://lin-xiuer.gitee.io/categories/%E5%85%AB%E8%82%A1%E6%96%87/"}],"tags":[{"name":"前端面试","slug":"前端面试","permalink":"https://lin-xiuer.gitee.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"},{"name":"八股文","slug":"八股文","permalink":"https://lin-xiuer.gitee.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"}]},{"title":"前端面试题进阶","slug":"前端面试题进阶","date":"2022-12-16T09:39:50.932Z","updated":"2022-12-16T12:10:27.632Z","comments":true,"path":"2022/12/16/前端面试题进阶/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98%E8%BF%9B%E9%98%B6/","excerpt":"冒泡排序 1234567891011121314let arr=[9,2,5,3,7,0]function arrSort(arr)&#123; for(var i=0;i&lt;arr.length-1;i++)&#123; for(var j=0;j&lt;arr.length-i-1;j++)&#123; if(arr[j]&gt;arr[j+1])&#123; var tmp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = tmp; &#125; &#125; &#125; return arr;&#125;console.log(arrSort(arr))","text":"冒泡排序 1234567891011121314let arr=[9,2,5,3,7,0]function arrSort(arr)&#123; for(var i=0;i&lt;arr.length-1;i++)&#123; for(var j=0;j&lt;arr.length-i-1;j++)&#123; if(arr[j]&gt;arr[j+1])&#123; var tmp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = tmp; &#125; &#125; &#125; return arr;&#125;console.log(arrSort(arr)) 事件冒泡 1234567function StopProgation(e)&#123; if(e.stopPropagation)&#123; e.stopProgation() &#125;else&#123; e.cancelBubble=true; &#125;&#125; 取消事件默认行为 1234567function PreventDefault(e)&#123; if(e.preventDefault)&#123; e.PreventDefault(); &#125;else&#123; e.returnValue =false; &#125;&#125; sort排序 123456var arr = new Array(9,2,5,3,7,0);function arrSort(a,b)&#123;return b-a;&#125;arr = arr.sort(arrSort);console.log(arr) 数组去重 1234567891011function unique(arr)&#123;var array=[];for(var i=0;i&lt;arr.length;i++)&#123;if(array.indexOf(arr[i])===-1)&#123;array.push(arr[i]);&#125;&#125;return array&#125;var arr = [4,4,5,6,6,5,1,2,1,3]console.log(unique(arr)) 说一下你对Vue组件复用机制的认识，Vuex的认识 ？ 组件需要注册后才可以使用，注册有全局注册和局部注册两种方式。 Vuex是一个专为了vue.js 应用程序开发的状态管理模式 什么是深拷贝，什么是浅拷贝，如何实现引用数据类型的深拷贝？ 浅拷贝就是两个对象引用的是同一个的内存空间，一个改变全部改变。 深拷贝就是两个对象，旧对象还是用原来的储存空间。但是新对象就不同了，新对象自己开辟了 一个新的空间，自己对自己控制，不再受原来空间的限制。 什么是内存泄漏，常见的自动内存管理机制有哪些（至少两个）他们的原理是什么？ 内存泄漏是指无法摄放已经占用的内存空间 标记清除和引用计数 标记清除是通过标记的对象来确定是否清除 引用计数是踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型赋给该变量时，则这个值的引用次数就是1。如果同一个变量又被赋给另外一个变量，则该值的引用次数加1。相反，如果包含对着值引用的变量又取得了另一个值，则这个值的引用次数减1。 Vue数据双向绑定的原理及其实现 a.vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的 实现过程: 1.实现一个监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。 2.实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。 3.实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。 MVC与MVVM的理解？a.MVC MVC模式：指Model、View、Controller三层。 视图层（View）：主要是用户界面的展示 控制层（Controller）：主要是处理Model层和View层的交互，对业务逻 模型层（Model）：主要是对数据的CRUD操作辑的处理。 b.MVVM MVVM模式：指Model、View、ViewModel三层。 视图层（View）：调用ViewModel的方法并响应变化。 视图模型层（ViewModel）：主要做业务的调度者，分割了View层和Model层。 模型（Model）：数据模型 GET、POST的区别？ a.get是从服务器上获取数据，post是向服务器传送数据。 b.get传送的数据量较小，不能大于2KB。post传送的数据量较大，一般被默认为不受限制 c.get安全性非常低，post安全性较高。 怎样避免全局变量污染？ a.尽量少使用全局变量 b.使用闭包 ES5严格模式的作用和规定？ 作用： a.消除javascript语法的一些不合理、不严谨之处，减少一些怪异行为 b.消除代码运行的一些不安全性，促进代码运行的安全 c.提高编译器效率，增加运行速度； d.为未来新版本的javascript做好铺垫 规定: a、全局变量显示声明 b、禁止对象属性重名、禁止函数参数重名 c、禁止使用with语句 d、函数预编译中this默认为undefined ajax跨域有哪些方法？ 方法一:XHR2 方法二:服务器跨域 方法三:CORS 方法四:jsonp jsonp原理:用了script标签不受同源策略的限制，在页面中动态插入了script，script标签的src属性就是后端api接口的地址，并且以get的方式将前端回调处理函数名称告诉后端，后端在响应请求时会将回调返还，并且将数据以参数的形式传递回去。 Vue相对于jQuery在开发上有什么优点 a.Vue比JQuery减少了 DOM 操作 b.组件化模式，开发效率高,方便维护什么是虚拟DOM：使用js对象模拟DOM，在操作过程中不会直接操作DOM，等待虚拟DOM操作完成，仅仅比较开始和结束状态虚拟DOM有哪些变换，最终根据结束状态虚拟DOM去操作DOM。 string的方法有哪些？ concat()连接两个或多个字符串，并返回新的字符串split()把字符串分割为字符串数组substr()从起始索引号提取字符串中指定数目的字符indexOf(‘ ‘)返回字符串指定字符最开始出现的位置LastindexOf(‘ ‘)返回字符串指定字符最后出现的位置replace()替换匹配的字符串slice()提取字符串的片段，并在新的字符串中返回被提取的部分toLocaleLowerCase()把字符串转换成小写toLocaleUpperCase()把字符串准换成大写toLowerCase()把字符串转换成小写 array的方法有哪些？ slice[start,end]：返回从原数组中指定开始下表到结束下表之间的项组成的新数组（原数组不变）splice()：删除，2个参数，起始位置，删除的项数pop()：删除数组的最后一个元素，减少数组的长度，返回被删除的值push()：将参数添加到数组的最后，返回新数组的长度shift()：删除数组的第一个参数，数组的长度减1，无参unshift()：像数组的开头添加一个或更多的元素，并返回新的长度。（参数不限）sort():按指定的参数对数组进行排序，返回的值是经过排序后的数组（无参，函数）concat()：把两个字符串连接起来，返回的值是一个副本（参数不限）join()：将数组的元素组成一个字符串，以separator（分割器）indexOf():从数组的开头向后查找，接受两个参数，要查找的项和查找起点的位置索引foeEach():对数组的每个元素执行一次提供的函数。filter()创建一个新的数组，符合条加的元素并生成新的数组findIndex()返回元素的位置 什么是闭包？1.闭包就是能够读取其他函数内部变量的函数2.闭包简单理解成”定义在一个函数内部的函数”3.闭包就是将函数内部和函数外部连接起来的一座桥梁作用：读取函数内部的变量，让这些变量的值始终保持在内存中。缺点：容易造成内存泄露 什么是promise函数？ promise是实现异步操作的方式,有三个状态，pending(进行中).fulfilled(已成功),rejected(已失败) 优点：解决回调地狱 缺点：一旦执行无法停止，报错不明显 什么是async&#x2F;await？ async&#x2F;await是写异步代码的新方式，promise的语法糖作用:async能够将函数变成异步，await是等待异步操作执行完优点：语法简洁代码直观，报错明显 this的指向问题？1.普通函数的this是由动态作用域决定，它总指向于它的直接调用者2.在默认情况(非严格模式,未使用 ‘use strict’)，如果函数没有直接调用者，this为window在严格模式下,如果函数没有直接调者，this为undefined3.call,apply,bind绑定的，this指的是绑定的对象 Vue 路由有哪些?全局守卫:1.router.beforeEach2.vue router.afterEach3.router.beforeResolve组件内守卫:1.beforeRouteEnter、2.beforeRouteUpdate、.3.beforeRouteLeave路由独享的守卫beforeEnter vue computed和watch的区别是什么？计算属性computed :1、支持缓存，只有依赖数据发生改变，才会重新进行计算2、不支持异步，当computed内有异步操作时无效，无法监听数据的变3、computed 属性值会默认走缓存，计算属性是基于它们的响应式依赖进行缓存的，也就是基于data中声明过或者父组件传递的props中的数据通过计算得到的值4、如果一个属性是由其他属性计算而来的，这个属性依赖其他属性，是多对一或者一对一，一般用computed5、如果computed属性属性值是函数，那么默认会走get方法；函数的返回值就是属性的属性值；在computed中的，属性都有一个get和一个set方法，当数据变化时，调用set方法。 侦听属性watch：1、不支持缓存，数据变，直接会触发相应的操作；2、watch支持异步；3、监听的函数接收两个参数，第一个参数是最新的值；第二个参数是输入之前的值；4、当一个属性发生变化时，需要执行对应的操作；一对多；5、监听数据必须是data中声明过或者父组件传递过来的props中的数据，当数据变化时，触发其他操作，函数有两个参数， immediate：组件加载立即触发回调函数执行， deep: 深度监听，为了发现对象内部值的变化，复杂类型的数据时使用，例如数组中的对象内容的改变，注意监听数组的变动不需要这么做。注意：deep无法监听到数组的变动和对象的新增，参考vue数组变异,只有以响应式的方式触发才会被监听到。 HTTP请求的五个步骤？1.创建XML httprequest 异步对象2.创建HTTP请求方式3.响应请求4.发送请求5.获取异步调用返回的数据 HTTP请求的事务过程？1.域名解析2.发起TCP三次握手3.建立TCP链接后发起http请求4.服务器响应http后发起请求，浏览器得到html的代码5.浏览器解析HTML代码，并得到HTML代码中的资源6.浏览器对页面进行渲染呈现给用户7.连接结束 es6中map和foreach的区别？相同点：1.都是循环遍历数组中的每一项2.有三个参数，参数分别为item，index，arr3.匿名函数中的this都指向window4.只能遍历数组不同点：1.map(）会分配内存空间存储新数组并返回，foreach()不会返回新数组2.forEach()允许callback更改原始数组的元素。map()返回新的数组。 什么是事件循环机制？js是一门单线程语言，任务进入执行栈会分为同步任务或异步任务，同步任务会优先在主线程中执行，异步任务会进入到事件队列等待主线程执行完再推到主线程执行，异步队列又分为宏任务和微任务，微任务的执行优先于宏任务，这整个过程称为一个事件循环宏任务：setTimeout, setInterval, setImmediate, I&#x2F;O, UI rendering微任务：process.nextTick, promise.then, MutationObserver在这里插入图片描述 浏览器中400，401,403,404分别代表什么意思？400：请求参数错误401：未登录，请授权403：跨域拒绝访问404：请求地址错误 vue2 和 vue3 数据绑定的区别？ vue2主要利用es5的object.defineProperty()对数据进行劫持结合发布订阅模式来实现的vue3只要利用es6 Proxy api对数据进行代理 12345相比于vue2.x，使用proxy的优势如下defineProperty只能监听某个属性，不能对全对象监听可以省去for in、闭包等内容来提升效率（直接绑定整个对象即可）可以监听数组，不用再去单独的对数组做特异性操作 vue3.x可以检测到数组内部数据的变化 什么是原型？ ①所有引用类型都有一个__proto__(隐式原型)属性，属性值是一个普通的对象②所有函数都有一个prototype(原型)属性，属性值是一个普通的对象③所有引用类型的__proto__属性指向它构造函数的prototype 什么是原型链？ 当访问一个对象的某个属性时，会先在这个对象本身属性上查找，如果没有找到，则会去它的__proto__隐式原型上查找，即它的构造函数的prototype，如果还没有找到就会再在构造函数的prototype的__proto__中查找，这样一层一层向上查找就会形成一个链式结构，我们称为原型链。 箭头函数与普通函数区别？1.箭头函数是匿名函数，不能作为构造函数，不能使用new2.箭头函数不绑定this，会捕获其所在的上下文的this值，作为自己的this值3.箭头函数通过 call() 或 apply() 方法调用一个函数时，只传入了一个参数，对 this 并没有影响。4.箭头函数没有原型属性 如何提高webpack打包速度？1.利用happyPack并行编译loder2.利用dllPlugin先将基本不会改动的代码打包成静态资源3.利用缓存，将cache.Directory设置为true 如何利用webpack提高前端性能1.压缩代码，将多余或者注释的代码删除2.利用CDN加速，将静态路径修改为对应cdn 的路径3.利用treeshaking，将永远不会运行到的代码片段删除掉 vue双向绑定的原理？vue.js采用数据劫持结合订阅和发布的方式，通过object.defineproperty劫持各个属性的set方法和get方法，在数据变动时发布消息给订阅者。触发响应的监听回调注意：object.defineproperty的缺点主要是不能直接修改对象或者数组，不能触发组件的重新渲染，而vue3使用proxy代理完美监听任何形式的数据，缺点是兼容性问题 说说对keep-alive的理解?作用在组件切换的时候，保存组件状态防止多次渲染,keep-alive的实现主要通过cache数组缓存所有vnode的实例 $nextTick的原理和作用原理：当执行一个任务时，将任务放到异步队列中，模拟宏任务和微任务，清除异步队列中的方法作用：当数据变化后执行某个操作，这个操作需要数据随着dom结构变化而变化的时候 v-show和v-if的区别 1.v-show是通过设置DOM元素的display样式属性控制显隐；v-if是动态的向DOM树内添加或者删除DOM元素；2.v-show只是简单的基于css切换；v-if切换有一个局部编译&#x2F;卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件；3.v-show适合频繁切换；v-if切换频率低的4.v-show性能消耗低，v-if性能消耗大————————————————版权声明：本文为CSDN博主「嚣张农民」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。原文链接：https://blog.csdn.net/weixin_40808668/article/details/109091092","categories":[{"name":"八股文","slug":"八股文","permalink":"https://lin-xiuer.gitee.io/categories/%E5%85%AB%E8%82%A1%E6%96%87/"}],"tags":[{"name":"前端面试","slug":"前端面试","permalink":"https://lin-xiuer.gitee.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"},{"name":"八股文","slug":"八股文","permalink":"https://lin-xiuer.gitee.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"}]},{"title":"高频面试之《重绘和回流》","slug":"高频面试之《重绘和回流》","date":"2022-12-16T09:39:39.368Z","updated":"2022-12-16T12:10:21.765Z","comments":true,"path":"2022/12/16/高频面试之《重绘和回流》/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/%E9%AB%98%E9%A2%91%E9%9D%A2%E8%AF%95%E4%B9%8B%E3%80%8A%E9%87%8D%E7%BB%98%E5%92%8C%E5%9B%9E%E6%B5%81%E3%80%8B/","excerpt":"什么是重绘和回流？ 重绘: 当页面中元素样式的改变并不影响它在文档流中的位置时，也就是说布局没有发生改变时(比如只是改变元素的颜色)。 回流： 当渲染树(Render Tree)中的部分（或全部）元素的尺寸、结构、显示隐藏等发生改变时，浏览器重新渲染的过程称为回流。 注意： 回流必定会发生重绘，重绘不一定会引发回流。 回流比重绘的代价要更高。有时即使仅仅回流一个单一的元素，它的父元素以及任何跟它相关的元素也会产生回流，牵一发动全身。","text":"什么是重绘和回流？ 重绘: 当页面中元素样式的改变并不影响它在文档流中的位置时，也就是说布局没有发生改变时(比如只是改变元素的颜色)。 回流： 当渲染树(Render Tree)中的部分（或全部）元素的尺寸、结构、显示隐藏等发生改变时，浏览器重新渲染的过程称为回流。 注意： 回流必定会发生重绘，重绘不一定会引发回流。 回流比重绘的代价要更高。有时即使仅仅回流一个单一的元素，它的父元素以及任何跟它相关的元素也会产生回流，牵一发动全身。 引起回流的因素？ （1）添加或者删除可见的 DOM 元素(不可见元素不会触发回流)；（2）元素尺寸或位置发生改变（3）元素内容变化，比如文字数量或图片大小（4）浏览器窗口大小发生改变（5）CSS伪类的激活（例如：:hover，从而改变了元素的布局的） 如何减少重绘和回流？ CSS 使用transform代替top； 使用visibility代替display：none，前者引起重绘，后者引发回流；避免使用table布局； 尽可能在DOM树最末端改变class； 避免设置多层内联样式，css选择符从右往左匹配查找，避免节点层级过多；将动画效果应用到position属性为absolute或fixed的元素上，避免影响其他元素的布局； 避免使用css表达式，可能会引发回流；css硬件加速； JavaScript 避免频繁操作样式，修改class最好； 避免频繁操作DOM，合并多次修改为一次； 避免频繁读取会引发回流&#x2F;重绘的属性，将结果缓存；对具有复杂动画的元素使用绝对定位，使他脱离文档流。","categories":[{"name":"八股文","slug":"八股文","permalink":"https://lin-xiuer.gitee.io/categories/%E5%85%AB%E8%82%A1%E6%96%87/"}],"tags":[{"name":"前端面试","slug":"前端面试","permalink":"https://lin-xiuer.gitee.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"},{"name":"八股文","slug":"八股文","permalink":"https://lin-xiuer.gitee.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"}]},{"title":"深入了解前端开发规范的区别《Commonjs、AMD、CMD、ES6模块化》","slug":"深入了解前端开发规范的区别《Commonjs、AMD、CMD、ES6模块化》","date":"2022-12-16T09:39:33.319Z","updated":"2022-12-16T09:43:03.913Z","comments":true,"path":"2022/12/16/深入了解前端开发规范的区别《Commonjs、AMD、CMD、ES6模块化》/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E7%9A%84%E5%8C%BA%E5%88%AB%E3%80%8ACommonjs%E3%80%81AMD%E3%80%81CMD%E3%80%81ES6%E6%A8%A1%E5%9D%97%E5%8C%96%E3%80%8B/","excerpt":"commonjs规范 （Node.js）: CommonJS 主要运行于服务器端，该规范指出，一个单独的文件就是一个模块，其内部定义的变量是属于这个模块的，不会对外暴露，也就是说不会污染全局变量。 Node.js为主要实践者，它有四个重要的环境变量为模块化的实现提供支持：module、exports、require、global。 CommonJS的核心思想就是通过 require 方法来同步加载所要依赖的其他模块，然后通过 exports 或者module.exports 来导出需要暴露的接口 优点：CommonJS规范在服务器端率先完成了JavaScript的模块化，解决了依赖、全局变量污染的问题，这也是js运行在服务器端的必要条件。 缺点：由于 CommonJS 是同步加载模块的，在服务器端，文件都是保存在硬盘上，所以同步加载没有问题，但是对于浏览器端，需要将文件从服务器端请求过来，那么同步加载就不适用了，所以，CommonJS是不适用于浏览器端的。","text":"commonjs规范 （Node.js）: CommonJS 主要运行于服务器端，该规范指出，一个单独的文件就是一个模块，其内部定义的变量是属于这个模块的，不会对外暴露，也就是说不会污染全局变量。 Node.js为主要实践者，它有四个重要的环境变量为模块化的实现提供支持：module、exports、require、global。 CommonJS的核心思想就是通过 require 方法来同步加载所要依赖的其他模块，然后通过 exports 或者module.exports 来导出需要暴露的接口 优点：CommonJS规范在服务器端率先完成了JavaScript的模块化，解决了依赖、全局变量污染的问题，这也是js运行在服务器端的必要条件。 缺点：由于 CommonJS 是同步加载模块的，在服务器端，文件都是保存在硬盘上，所以同步加载没有问题，但是对于浏览器端，需要将文件从服务器端请求过来，那么同步加载就不适用了，所以，CommonJS是不适用于浏览器端的。 AMD 规范（require.js）： AMD是”Asynchronous Module Definition”的缩写，意思就是”异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。 模块功能主要的几个命令：define、require、return和define.amd。define是全局函数，用来定义模块,define(id?, dependencies?,factory)。require命令用于输入其他模块提供的功能，return命令用于规范模块的对外接口，define.amd属性是一个对象，此属性的存在来表明函数遵循AMD规范。 优点：适合在浏览器环境中异步加载模块。可以并行加载多个模块。 缺点：提高了开发成本，并且不能按需加载，而是必须提前加载所有的依赖。 CMD 规范（sea.js）: CMD通过按需加载的方式，而不是必须在模块开始就加载所有的依赖。 CMD推崇依赖就近、延迟执行。 优点：同样实现了浏览器端的模块化加载。可以按需加载，依赖就近。 缺点：依赖SPM打包，模块的加载逻辑偏重。 ES6模块化： ES modules（ESM）是 JavaScript 官方的标准化模块系统。 在ES6中，我们可以使用 import 关键字引入模块，通过 export 关键字导出模块，但是由于ES6目前无法在浏览器中执行，所以，我们只能通过babel将不被支持的import编译为当前受到广泛支持的 require。 总结： AMD&#x2F;CMD&#x2F;CommonJs 是js模块化开发的规范，对应的实现是require.js&#x2F;sea.js&#x2F;Node.js CommonJs 主要针对服务端，AMD&#x2F;CMD&#x2F;ES Module主要针对浏览器端(服务端一般采用同步加载的方式，浏览器端需要异步加载) AMD&#x2F;CMD区别，虽然都是并行加载js文件，但还是有所区别，AMD是预加载，在并行加载js文件同时，还会解析执行该模块（因为还需要执行，所以在加载某个模块前，这个模块的依赖模块需要先加载完成）；而CMD是懒加载，虽然会一开始就并行加载js文件，但是不会执行，而是在需要的时候才执行。 CommonJs和ES Module的区别：– CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。– CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。– CommonJS 模块的require()是同步加载模块，ES6 模块的import命令是异步加载，有一个独立的模块依赖的解析阶段。","categories":[{"name":"八股文","slug":"八股文","permalink":"https://lin-xiuer.gitee.io/categories/%E5%85%AB%E8%82%A1%E6%96%87/"}],"tags":[{"name":"前端面试","slug":"前端面试","permalink":"https://lin-xiuer.gitee.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"},{"name":"八股文","slug":"八股文","permalink":"https://lin-xiuer.gitee.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"}]},{"title":"vue安卓移动端点击input输入框引起布局混乱","slug":"vue安卓移动端点击input输入框引起布局混乱","date":"2022-12-16T09:32:27.438Z","updated":"2022-12-16T09:44:26.209Z","comments":true,"path":"2022/12/16/vue安卓移动端点击input输入框引起布局混乱/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/vue%E5%AE%89%E5%8D%93%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%82%B9%E5%87%BBinput%E8%BE%93%E5%85%A5%E6%A1%86%E5%BC%95%E8%B5%B7%E5%B8%83%E5%B1%80%E6%B7%B7%E4%B9%B1/","excerpt":"问题描述：Vue开发中，当我们相对于父视图的底部布局子控件时，需要用position:fixed，如果页面内容不是很长，没有超出屏幕范围，那就还好，没有问题；一旦超出屏幕范围，当你点击输入框，弹出键盘时，底部固定定位的子控件就会被顶起来。这个问题在iOS端不会出现，在安卓端会出现，原因是键盘加载方式不一样，这里不作详情解答。 解决方案：在键盘弹起时，页面高度变小，底部固定定位上升，所以我们只需要在页面高度变小时，隐藏底部子控件，当键盘消失时再显示底部子控件。 解决方法：检测浏览器的resize事件，当高度过小时就可以判定为出现这种情况，这时把定位改成absolute或者直接隐藏掉之类的。 第一步： 先在 data 中去 定义 一个记录高度是 属性","text":"问题描述：Vue开发中，当我们相对于父视图的底部布局子控件时，需要用position:fixed，如果页面内容不是很长，没有超出屏幕范围，那就还好，没有问题；一旦超出屏幕范围，当你点击输入框，弹出键盘时，底部固定定位的子控件就会被顶起来。这个问题在iOS端不会出现，在安卓端会出现，原因是键盘加载方式不一样，这里不作详情解答。 解决方案：在键盘弹起时，页面高度变小，底部固定定位上升，所以我们只需要在页面高度变小时，隐藏底部子控件，当键盘消失时再显示底部子控件。 解决方法：检测浏览器的resize事件，当高度过小时就可以判定为出现这种情况，这时把定位改成absolute或者直接隐藏掉之类的。 第一步： 先在 data 中去 定义 一个记录高度是 属性 12345678910111213data () &#123; return &#123; docmHeight: &#x27;0&#x27;, //默认屏幕高度 showHeight: &#x27;0&#x27;, //实时屏幕高度 hidshow:true //显示或者隐藏footer, isResize:false //默认屏幕高度是否已获取 &#125;; &#125;, 第二步： 我们需要将 reisze 事件在 vue mounted 的时候 去挂载一下它的方法 123456789101112131415161718192021222324252627mounted() &#123; // window.onresize监听页面高度的变化 window.onresize = ()=&gt;&#123; return(()=&gt;&#123; if (!this.isResize) &#123; //默认屏幕高度 this.docmHeight: document.documentElement.clientHeight this.isResize = true &#125; //实时屏幕高度 this.showHeight = document.body.clientHeight &#125;)() &#125; &#125;, 第三步：watch监控比较，判断按钮是否该显示出来 12345678910111213showHeight:function() &#123; if(this.docmHeight &gt; this.showHeight)&#123; this.hidshow=false &#125;else&#123; this.hidshow=true &#125; &#125; 第四步：在模板中给footer添加v-show 123456&lt;div class=&quot;footer&quot; v-show=&quot;hidshow&quot;&gt;移动端点击输入框，弹出键盘，底部被顶起问题&lt;/div&gt;","categories":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/tags/vue/"}]},{"title":"vue 渲染列表报错Avoid using non-primitive value as key, use string_number value instead.  found in","slug":"vue 渲染列表报错Avoid using non-primitive value as key, use string_number value instead.  found in","date":"2022-12-16T09:32:27.436Z","updated":"2022-12-16T09:36:39.707Z","comments":true,"path":"2022/12/16/vue 渲染列表报错Avoid using non-primitive value as key, use string_number value instead.  found in/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/vue%20%E6%B8%B2%E6%9F%93%E5%88%97%E8%A1%A8%E6%8A%A5%E9%94%99Avoid%20using%20non-primitive%20value%20as%20key,%20use%20string_number%20value%20instead.%20%20found%20in/","excerpt":"","text":"控制台报错报错原因说v-for 循环的key值重复了，那就看看自己写的代码报错时的代码，如下:我们可以在v-for循环里面再定义个index值,然后写到key 里面去改正后的代码报错解决，大功告成","categories":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/tags/vue/"}]},{"title":"vue引入外部的css文件","slug":"vue引入外部的css文件","date":"2022-12-16T09:32:27.434Z","updated":"2022-12-16T09:38:39.819Z","comments":true,"path":"2022/12/16/vue引入外部的css文件/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/vue%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8%E7%9A%84css%E6%96%87%E4%BB%B6/","excerpt":"","text":"1.全局引入引入外部文件只需在main.js文件中，例如import ‘.&#x2F;assets&#x2F;YmOrder.css’2.局部引入在需要用到的vue文件进行局部引入,例如 @import url('./assets/YmOrder.css');","categories":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/tags/vue/"}]},{"title":"vue 写相对路径图片不显示","slug":"vue 写相对路径图片不显示","date":"2022-12-16T09:32:27.432Z","updated":"2022-12-16T09:36:27.813Z","comments":true,"path":"2022/12/16/vue 写相对路径图片不显示/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/vue%20%E5%86%99%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84%E5%9B%BE%E7%89%87%E4%B8%8D%E6%98%BE%E7%A4%BA/","excerpt":"","text":"我们一般直接在vue的文件中直接引入路径是不能显示的,如图原因是因为webpack打包后本地路径丢失，所以我们在data中可以通过require去引入改正后的代码在data中定义值并传入路径欧克欧克，大功告成","categories":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/tags/vue/"}]},{"title":"vue-cli 打包后element图标异常不显示问题","slug":"vue-cli 打包后element图标异常不显示问题","date":"2022-12-16T09:32:27.430Z","updated":"2022-12-16T09:44:17.260Z","comments":true,"path":"2022/12/16/vue-cli 打包后element图标异常不显示问题/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/vue-cli%20%E6%89%93%E5%8C%85%E5%90%8Eelement%E5%9B%BE%E6%A0%87%E5%BC%82%E5%B8%B8%E4%B8%8D%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/","excerpt":"vue打包后如下element图标不显示控制台报错显示没有找到element-icons资源解决办法：在build文件下的utils.js文件中添加这一句publicPath:’..&#x2F;..&#x2F;‘找到我如下代码中去添加","text":"vue打包后如下element图标不显示控制台报错显示没有找到element-icons资源解决办法：在build文件下的utils.js文件中添加这一句publicPath:’..&#x2F;..&#x2F;‘找到我如下代码中去添加 12345678910111213 // Extract CSS when that option is specified // (which is the case during production build) if (options.extract) &#123; return ExtractTextPlugin.extract(&#123; use: loaders, fallback: &#x27;vue-style-loader&#x27;, publicPath:&#x27;../../&#x27; &#125;) &#125; else &#123; return [&#x27;vue-style-loader&#x27;].concat(loaders) &#125;&#125; 再打包一次图标显示出来,大功告成","categories":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/tags/vue/"}]},{"title":"vue axios常用写法","slug":"vue axios常用写法","date":"2022-12-16T09:32:27.428Z","updated":"2022-12-16T09:36:59.685Z","comments":true,"path":"2022/12/16/vue axios常用写法/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/vue%20axios%E5%B8%B8%E7%94%A8%E5%86%99%E6%B3%95/","excerpt":"","text":"1234567891011121314151617181920212223242526axios(&#123; url: &#x27;传入的api&#x27;, //对封装好的对象进行序列化,如果后台没说明可以直接传obj对象就行 data: &#123;obj:JSON.stringify(obj)&#125;, //定义get请求或者post请求 method: &quot;post&quot;, //设置参数的表头形式，这是表单形式传递 headers: &#123; &quot;Content-Type&quot;: &#x27;application/x-www-form-urlencoded&#x27; &#125;, //对data的参数转化为键值对 transformRequest: [function (data) &#123; let ret = &#x27;&#x27;; for (let it in data) &#123; ret += encodeURIComponent(it) + &#x27;=&#x27; + encodeURIComponent(data[it]) + &#x27;&amp;&#x27;; &#125; return ret &#125;] &#125;).then(res=&gt;&#123; //后台成功请求200运行到这里 console.log(res) &#125; &#125;) .catch(err=&gt;&#123; //后台请求失败运行到这里 &#125;);","categories":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/tags/vue/"}]},{"title":"vue终端提示无法加载文件 C__Users_Administrator_AppData_Roaming_npm_vue.ps1，因为在此系统上禁止运行脚本","slug":"vue终端提示无法加载文件 C__Users_Administrator_AppData_Roaming_npm_vue.ps1，因为在此系统上禁止运行脚本","date":"2022-12-16T09:32:27.426Z","updated":"2022-12-16T09:44:42.844Z","comments":true,"path":"2022/12/16/vue终端提示无法加载文件 C__Users_Administrator_AppData_Roaming_npm_vue.ps1，因为在此系统上禁止运行脚本/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/vue%E7%BB%88%E7%AB%AF%E6%8F%90%E7%A4%BA%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6%20C__Users_Administrator_AppData_Roaming_npm_vue.ps1%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%9C%A8%E6%AD%A4%E7%B3%BB%E7%BB%9F%E4%B8%8A%E7%A6%81%E6%AD%A2%E8%BF%90%E8%A1%8C%E8%84%9A%E6%9C%AC/","excerpt":"vue : 无法加载文件 C:\\Users\\Administrator\\AppData\\Roaming\\npm\\vue.ps1，因为在此系统上禁止运行脚本解决方法：1、管理员身份运行PowerShell（命令提示符，来源于Linux的命令提示符也叫Shell）","text":"vue : 无法加载文件 C:\\Users\\Administrator\\AppData\\Roaming\\npm\\vue.ps1，因为在此系统上禁止运行脚本解决方法：1、管理员身份运行PowerShell（命令提示符，来源于Linux的命令提示符也叫Shell） 2、执行：set-ExecutionPolicy RemoteSigned （签名或运行这些脚本）3.重新在文件创建vue项目：vue create test成功！","categories":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/tags/vue/"}]},{"title":"vue实现简单的tab盒子切换（一）","slug":"vue实现简单的tab盒子切换（一）","date":"2022-12-16T09:32:27.423Z","updated":"2022-12-16T09:45:35.840Z","comments":true,"path":"2022/12/16/vue实现简单的tab盒子切换（一）/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/vue%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84tab%E7%9B%92%E5%AD%90%E5%88%87%E6%8D%A2%EF%BC%88%E4%B8%80%EF%BC%89/","excerpt":"废话不多说，直接上代码~~~~~~~~~~~ HTML部分js部分","text":"废话不多说，直接上代码~~~~~~~~~~~ HTML部分js部分 css部分实现效果：","categories":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/tags/vue/"}]},{"title":"vue项目 启动失败报错（实用的解决方法）","slug":"vue项目 启动失败报错（实用的解决方法）","date":"2022-12-16T09:32:27.421Z","updated":"2022-12-16T09:44:36.350Z","comments":true,"path":"2022/12/16/vue项目 启动失败报错（实用的解决方法）/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/vue%E9%A1%B9%E7%9B%AE%20%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E6%8A%A5%E9%94%99%EF%BC%88%E5%AE%9E%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95%EF%BC%89/","excerpt":"第一种报错如下解决办法：直接项目目录下运行npm install webpack-dev-server -g","text":"第一种报错如下解决办法：直接项目目录下运行npm install webpack-dev-server -g 第二种常见报错如下如果我们遇到像Error: Cannot find module &#39;***&#39;的报错我们可以直接项目目录下npm install 报错提示的***去进行下载示例报错如下：解决办法:讲解完毕","categories":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/tags/vue/"}]},{"title":"vue 插槽的作用,用插槽slot-scope获取表格中的数据","slug":"vue 插槽的作用,用插槽slot-scope获取表格中的数据","date":"2022-12-16T09:32:27.419Z","updated":"2022-12-16T09:43:59.759Z","comments":true,"path":"2022/12/16/vue 插槽的作用,用插槽slot-scope获取表格中的数据/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/vue%20%E6%8F%92%E6%A7%BD%E7%9A%84%E4%BD%9C%E7%94%A8,%E7%94%A8%E6%8F%92%E6%A7%BDslot-scope%E8%8E%B7%E5%8F%96%E8%A1%A8%E6%A0%BC%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE/","excerpt":"这里我用了elementui的表格组件去做表格,如图 我在编辑和删除的组件用template去包裹，然后在这个标签去写上slot-scope&#x3D;”scope”","text":"这里我用了elementui的表格组件去做表格,如图 我在编辑和删除的组件用template去包裹，然后在这个标签去写上slot-scope&#x3D;”scope” 然后在需要点击的按钮去添加一个@click事件，在方法中去写上两个参数，第一个参数是当前点击按钮获取的表格在第几行的id,第二个参数是获取表格中当前行的全部参数如图：当我点击表格的第一行时我们看看打印出来的数据现在我们是拿到了当前行的全部数据,大功告成","categories":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/tags/vue/"}]},{"title":"小白如何快速实现每个月倒计时","slug":"小白如何快速实现每个月倒计时","date":"2022-12-16T09:32:27.417Z","updated":"2022-12-16T09:43:10.382Z","comments":true,"path":"2022/12/16/小白如何快速实现每个月倒计时/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/%E5%B0%8F%E7%99%BD%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0%E6%AF%8F%E4%B8%AA%E6%9C%88%E5%80%92%E8%AE%A1%E6%97%B6/","excerpt":"代码一 123456789//获取这个月最后一天 getLastDay()&#123; var year = new Date().getFullYear(); //获取年份 var month = new Date().getMonth() + 1; //获取月份 var lastDate = new Date(year, month , 0).getDate(); //获取当月最后一日 month = month &lt; 10 ? &#x27;0&#x27; + month : month ; //月份补 0 return [year,month ,lastDate ].join(&quot;-&quot;) &#125;,//打印后 2022-12-6 代码二","text":"代码一 123456789//获取这个月最后一天 getLastDay()&#123; var year = new Date().getFullYear(); //获取年份 var month = new Date().getMonth() + 1; //获取月份 var lastDate = new Date(year, month , 0).getDate(); //获取当月最后一日 month = month &lt; 10 ? &#x27;0&#x27; + month : month ; //月份补 0 return [year,month ,lastDate ].join(&quot;-&quot;) &#125;,//打印后 2022-12-6 代码二 12345678910111213141516171819202122232425262728293031//计算倒计时countDownFn() &#123; // 获取当前时间 var date = new Date(); var getDay = this.getLastDay() var last_mouth = this.getLastDay()+&#x27; 0:0:0&#x27; //上面我们得到的数据 2022-12-6 0:0:0 // 获取当月倒计时时间 var tgt = new Date(last_mouth); // console.log(333,tgt,date) // 获取时间差 var distance = (tgt - date); // if (distance &lt;= 0) &#123; // // alert(&quot;目标时间不能小于当前时间&quot;); // clearInterval(_time); // return; // &#125; console.log(distance, &quot;时间差&quot;); // 计算剩余时间 var d = Math.floor(distance / (1000 * 60 * 60 * 24));//天 var h = Math.floor((distance / (1000 * 60 * 60)) % 24);//时 var m = Math.floor((distance / (1000 * 60)) % 60);//分 var ms = Math.floor(distance/1000 % 60);//秒 this.time = &#123; d:d.toString().padStart(2, &quot;0&quot;), h:h.toString().padStart(2, &quot;0&quot;), m:m.toString().padStart(2, &quot;0&quot;), ms:ms.toString().padStart(2,&quot;0&quot;) &#125;&#125;, 代码三 12345onShow() &#123; this.destroy_time=setInterval(()=&gt;&#123; this.countDownFn() &#125;,1000)&#125;, 代码四 123destroyed() &#123; clearInterval(this.destroy_time);&#125;, 效果","categories":[{"name":"vue2","slug":"vue2","permalink":"https://lin-xiuer.gitee.io/categories/vue2/"},{"name":"vue3","slug":"vue2/vue3","permalink":"https://lin-xiuer.gitee.io/categories/vue2/vue3/"},{"name":"javascript","slug":"vue2/vue3/javascript","permalink":"https://lin-xiuer.gitee.io/categories/vue2/vue3/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://lin-xiuer.gitee.io/tags/javascript/"},{"name":"vue2","slug":"vue2","permalink":"https://lin-xiuer.gitee.io/tags/vue2/"},{"name":"vue3","slug":"vue3","permalink":"https://lin-xiuer.gitee.io/tags/vue3/"}]},{"title":"新手如何快速用vue导入GLTFLoader模型","slug":"新手如何快速用vue导入GLTFLoader模型","date":"2022-12-16T09:32:27.416Z","updated":"2022-12-16T09:43:13.500Z","comments":true,"path":"2022/12/16/新手如何快速用vue导入GLTFLoader模型/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/%E6%96%B0%E6%89%8B%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E7%94%A8vue%E5%AF%BC%E5%85%A5GLTFLoader%E6%A8%A1%E5%9E%8B/","excerpt":"Three.js支持包括 .obj、.gltf等类型的模型结构。glTF（GL传输格式）是Khronos的一个开放项目，它为3D资产提供了一种通用的、可扩展的格式，这种格式既高效又与现代web技术高度互操作。 一、安装引入Three.js 1cnpm install three --save // 很好装的最新版本，可正常引入使用 在需要使用3D模型的页面导入包：","text":"Three.js支持包括 .obj、.gltf等类型的模型结构。glTF（GL传输格式）是Khronos的一个开放项目，它为3D资产提供了一种通用的、可扩展的格式，这种格式既高效又与现代web技术高度互操作。 一、安装引入Three.js 1cnpm install three --save // 很好装的最新版本，可正常引入使用 在需要使用3D模型的页面导入包： 1import * as Three from &quot;three&quot; 在Vue中导入glTF模型需要使用 Three.js 中的 GLTFLoader： 1234import &#123; GLTFLoader &#125; from &quot;three/examples/jsm/loaders/GLTFLoader&quot;// GLTF加载器(GLTFLoader)，用于载入glTF 2.0资源的加载器。import &#123; OrbitControls &#125; from &quot;three/examples/jsm/controls/OrbitControls&quot;// OrbitControls是THREEJS中最常用的一个控制器,可以帮助我们实现以目标为焦点的旋转缩放。 二、页面DOM元素渲染 在Vue中，我们需要使用一个 div 元素来作为3D模型的容器： 1&lt;div id=&quot;container&quot;&gt;&lt;/div&gt; 原理：页面打开之后，Three.js会给 div 元素添加一个 canvas 子元素用来作为3D模型的画布。 三、初始化 Three.js中最重要的三大组件: 场景——Scene 相机——Camera 渲染器——Renderer 代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105mounted()&#123; this.initScene() this.initContainer() this.initCamera() this.initRenderer() this.initControls()&#125;,methods:&#123; initModelContainer() &#123; this.model_container = document.getElementById(&quot;container&quot;); this.model_container.style.height = window.innerHeight + &quot;px&quot;; this.model_container.style.width = window.innerWidth + &quot;px&quot;; this.height = this.model_container.clientHeight; this.width = this.model_container.clientWidth; &#125;, initScene() &#123; this.scene = new Three.Scene(); &#125;, initCamera() &#123; // 照相机 this.camera = new Three.PerspectiveCamera(70, this.width / this.height, 0.01, 1000); this.camera.position.set(-100, 60, 0); &#125;, initRenderer() &#123; this.renderer = new Three.WebGLRenderer(&#123; antialias: true, alpha: true &#125;); this.renderer.setSize(this.width, this.height); // 兼容高清屏幕 this.renderer.setPixelRatio(window.devicePixelRatio); // 消除canvas的外边框 this.renderer.domElement.style.outline = &quot;none&quot;; this.model_container.appendChild(this.renderer.domElement); &#125;, initControls() &#123; this.orbitControls = new OrbitControls( this.camera, this.renderer.domElement ); // 惯性 this.orbitControls.enableDamping = true; // 动态阻尼系数 this.orbitControls.dampingFactor = 0.25; // 缩放 this.orbitControls.enableZoom = true; // 右键拖拽 this.orbitControls.enablePan = true; // 水平旋转范围 this.orbitControls.maxAzimuthAngle = Math.PI / 6; this.orbitControls.minAzimuthAngle = -Math.PI / 6; // 垂直旋转范围 this.orbitControls.maxPolarAngle = Math.PI / 6; this.orbitControls.minPolarAngle = -Math.PI / 6; &#125;,&#125; 四、导入glTF模型 将你的 gltf 模型放在 Vue 项目中的 public 文件夹下，注意，只有将 gltf 模型放在静态资源文件夹下才能被访问到。 在钩子函数 mounted 中进行模型加载： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687mounted()&#123; this.loadModel()&#125;,methods:&#123; loadModel()&#123; let that = this // gltf模型加载器 let loader = new GLTFLoader() return new Promise(function(resolve, reject)&#123; loader.load( // 模型在 /public/static/building/文件夹下 &quot;static/building/scene.gltf&quot;, gltf =&gt; &#123; console.log(gltf) gltf.scene.traverse(object =&gt; &#123; // 修改模型材质 let material = ... object.material = material &#125;) let group = new Three.Group() group.add(gltf.scene) let box = new Three.Box3() box.setFromObject(group) let wrapper = new Three.Object3D() wrapper.add(group) // 根据自己模型的大小设置位置 wrapper.position.set(100, -300, 120) // 将模型加入到场景中 ! important that.scene.add(wrapper) &#125;, xhr =&gt; &#123; // 模型加载期间的回调函数 console.log(`$&#123;(xhr.loaded / xhr.total) * 100% building model loaded` ); &#125;, error =&gt; &#123; // 模型加载出错的回调函数 console.log(&quot;error while loading&quot;, error); reject(&quot;load model error&quot;, error); &#125; ) &#125;) &#125;&#125; 启动项目，模型导入成功，可以根据自己的需求为模型渲染材质。 五、免费下载3D模型的素材网站 网址一 网址二","categories":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/categories/vue/"},{"name":"threejs","slug":"vue/threejs","permalink":"https://lin-xiuer.gitee.io/categories/vue/threejs/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/tags/vue/"},{"name":"threejs","slug":"threejs","permalink":"https://lin-xiuer.gitee.io/tags/threejs/"}]},{"title":"前端埋点实现方案","slug":"前端埋点实现方案","date":"2022-12-16T09:32:27.414Z","updated":"2022-12-16T09:42:55.814Z","comments":true,"path":"2022/12/16/前端埋点实现方案/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/%E5%89%8D%E7%AB%AF%E5%9F%8B%E7%82%B9%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/","excerpt":"前言 领导今天又来活了😣，要记录每个页面的停留时间，以及页面的操作，是由哪个页面跳转过来的，给每个页面生成GUID上报给服务端，并且需要携带设备型号和设备唯一标识🙄 名称解释 UV（Unique visitor） 是指通过互联网访问、浏览这个网页的自然人。访问您网站的一台电脑客户端为一个访客。00:00-24:00内相同的客户端只被计算一次。一天内同个访客多次访问仅计算一个UV。","text":"前言 领导今天又来活了😣，要记录每个页面的停留时间，以及页面的操作，是由哪个页面跳转过来的，给每个页面生成GUID上报给服务端，并且需要携带设备型号和设备唯一标识🙄 名称解释 UV（Unique visitor） 是指通过互联网访问、浏览这个网页的自然人。访问您网站的一台电脑客户端为一个访客。00:00-24:00内相同的客户端只被计算一次。一天内同个访客多次访问仅计算一个UV。 IP（Internet Protocol） 独立IP是指访问过某站点的IP总数，以用户的IP地址作为统计依据。00:00-24:00内相同IP地址之被计算一次。 UV与IP区别 如：你和你的家人用各自的账号在同一台电脑上登录新浪微博，则IP数+1，UV数+2。由于使用的是同一台电脑，所以IP不变，但使用的不同账号，所以UV+2 PV（Page View） 即页面浏览量或点击量，用户每1次对网站中的每个网页访问均被记录1个PV。用户对同一页面的多次访问，访问量累计，用以衡量网站用户访问的网页数量。 VV（Visit View） 用以统计所有访客1天内访问网站的次数。当访客完成所有浏览并最终关掉该网站的所有页面时便完成了一次访问，同一访客1天内可能有多次访问行为，访问次数累计。 PV与VV区别 如：你今天10点钟打开了百度，访问了它的三个页面；11点钟又打开了百度，访问了它的两个页面，则PV数+5，VV数+2.PV是指页面的浏览次数，VV是指你访问网站的次数。 埋点分类 代码埋点 通过代码的方式在页面中嵌入逻辑🎨，比如捕获一个点击事件，在这个点击事件之前加入代码埋点⛑,上报给后台🥐。国内已经有很多成型的服务商了如友盟，百度统计等🌯，都提供了比较成型的方案🎨，并可以在后台管理系统中查看比较详细的数据分析🧵，但是肯定会有领导想要把这些事情掌握在自己的手中，我们就只能通过自身开发来实现代码埋点🍞。 优点： 控制精准，可以非常精确地选择什么时候发送数据。 传递多样化自定义属性、自定义事件，传递比较丰富的数据到服务端。 缺点： 埋点代价比较大，每一个控件的埋点都需要添加相应的代码，不仅工作量大，必须是技术人员才能完成。更新的代价比较大，每一次更新埋点方案，都必须改代码。 可视化埋点 个人理解的可视化埋点应该是肯定需要第三方的服务商支持🍜，不会有做专门业务的公司去做可视化埋点的解决方案。可视化埋点开发人员除集成采集可视化SDK 外👜，不需要额外去写埋点代码🍠，而是由业务人员或运营人员通过访问分析平台的圈选功能🤔，来“圈”出需要对用户行为进行捕捉的控件🎪，并给出事件命名🚘。圈选完毕后，这些配置会同步到各个用户的终端上😮，由采集SDK按照圈选的配置自动进行用户行为数据的采集和发送🚇。 优点： 埋点代价小，更新代价小 埋点只需业务同学接入，开发只需对接可视化SDK 缺点： 无法做到自定义获取数据 可视化埋点覆盖的功能有限 仅支持客户端行为 无痕埋点 无痕埋点又叫全埋点🥪，网上又很多文章写的都是无痕埋点是将所有事件的操作全部上报😀，但是我们在实现的过程中肯定是不会监听那么多的事件吧😋，但是好像也有第三方服务商sdk集成了所有事件😏。 我的个人理解无痕埋点是针对某一个单一事件，在全局实现监听达到上报，而不是全部事件上报才叫无痕埋点🥙。只要有某个事件在全局实现监听，针对这个事件的埋点方式就称为无痕埋点🌯 优点： 由于采集的是全量数据，所以产品迭代过程中是不需要关注埋点逻辑的，也不会出现漏埋、误埋等现象。无埋点方式因为收集的是全量数据，可以大大减少运营和产品的试错成本 如果集成sdk之后无需埋点，方便快捷 缺点： 缺点与可视化埋点相同，未解决个性化自定义获取数据的问题，缺乏数据获取的灵活性； 数据量过大，如果不使用第三方服务商，针对自身的服务器是个考验 实现方案步骤（uni-app，其他项目逻辑相同） 两方面上报: 1.事件上报(目前只有点击事件埋点)，2.停留时间上报 事件上报：通过给元素绑定自定义指令的方式实现(减少对原有代码的侵入)🍜，将信息存储在缓存池中定时上报，上报之后清空之前的上报信息🥠。停留时间上报：需要重新封装路由，创建路由拦截在跳转之前记录来源,以及上一个页面的停留时间，当拦截器捕获成功之后🌯，如果发现停留时间大于xx秒进行上报🥙。 优点：清晰合理，比较适合新项目。 缺点：针对老项目需要与产品和运营对接埋点方案绑定自定义事件🤪，如果是老项目需要对uni.navigateTo,uni.redirectTo,uni.reLaunch,uni.switchTab进行二次封装。 问：为什么何将信息存储，而不是实时上报？ 答：考虑到服务器的压力，采用了定时上报的方式。 问：为什么监听停留时长大于XX秒才进行上报？答：1.服务器的压力问题。2考虑到用户可能做一些没意义的操作，所以停留时长大于XX秒才属于有效页面。 实现方法 事件埋点上报 在common文件夹下创建自定义指令文件，在main.js中引用该文件。 123456789101112131415161718192021222324252627282930313233import Vue from &quot;vue&quot;;// 自定义埋点指令Vue.directive(&quot;buried&quot;, &#123; bind: (el, binding) =&gt; &#123; if (binding.value) &#123; //这里参数是根据自己业务可以自己定义 let params = &#123; currentUrl: binding.value.currentUrl, triggerType: binding.value.triggerType, title: binding.value.title, frontTriggerType: binding.value.triggerType, behavior: binding.value.behavior, &#125;; //如果是浏览类型，直接保存,目前只考虑点击类型 if (binding.value.triggerType == &quot;browse&quot;) &#123; console.log(&quot;browse&quot;, params); //调用后台接口保存数据 &#125; else if (binding.value.triggerType == &quot;click&quot;) &#123; //如果是click类型，监听click事件 el.addEventListener( &quot;click&quot;, () =&gt; &#123; // 将操作和内容存储在缓存中定时上报 let buriedArray = uni.getStorageSync(&#x27;buriedArray&#x27;) //获取埋点集合 buriedArray.push(params) // 将埋点集合存入缓存中 uni.setStorageSync(&#x27;buriedArray&#x27;, buriedArray) &#125;, false ); &#125; &#125; &#125;,&#125;); 复制代码在app.vue中的onLaunch生命周期中创建定时任务与缓存池,在onHide生命周期中销毁定时任务 12345678910111213141516let timeInterval = nullonLaunch()&#123; uni.setStorageSync(&#x27;buriedArray&#x27;, []) // 定时上报埋点数据 timeInterval = setInterval(() =&gt; &#123; if (uni.getStorageSync(&#x27;buriedArray&#x27;).length &gt; 0) &#123; // 上报逻辑，根据需求自行完善 upLoadBuriedInfo(uni.getStorageSync(&#x27;buriedArray&#x27;)) // 上报成功之后清空埋点数据重新上报 uni.setStorageSync(&#x27;buriedArray&#x27;, []) &#125; &#125;, time)&#125;onHide: function () &#123; timeInterval &amp;&amp; clearInterval(timeInterval)&#125; 停留时间上报 首先读取page.json中的文件获取path和title(原文链接)，先在项目根目录创建一个router文件夹🍞，在vue.config.js里面加入如下代码,这样每次打包之后router文件夹下的index.js中就会生成一个 title和path的对应表。😚 1234567891011121314151617181920212223242526const path = require(&#x27;path&#x27;)const fs = require(&#x27;fs&#x27;)const fromFile = path.join(__filename, &#x27;../pages.json&#x27;)const toFile = path.join(__filename, &#x27;../router/index.js&#x27;)const buffPrefix = Buffer.from(&#x27;export default &#x27;)const fileData = fs.readFileSync(fromFile)// 转成可读的js, 正则删除注释， 不然JSON.parse会报错const fileObj = JSON.parse(fileData.toString().replace(/\\/\\/.*/g, &#x27;&#x27;))// 遍历，只取路径和标题，其他的不要，已减小文件体积const routes = fileObj.pages.map(e =&gt; &#123; return &#123; title: e.style ? e.style.navigationBarTitleText ? e.style.navigationBarTitleText : e.name : &#x27;未知&#x27;, path: &#x27;/&#x27;+e.path, &#125;&#125;)fs.writeFileSync(toFile, buffPrefix + Buffer.from(JSON.stringify(routes)))module.exports = &#123; configureWebpack: &#123; plugins: [] &#125;&#125; 在common中创建routeGuards.js 监听路由拦截，进行上报，在main.js中引用该文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445import Vue from &#x27;vue&#x27;;import v5 from &#x27;uuid/v5&#x27;;import UniRouteGuard from &#x27;@/js_sdk/pocky-route-gurads/lib&#x27;;import router from &#x27;@/router&#x27;Vue.use(UniRouteGuard);const guard = new UniRouteGuard();let startTime = Date.now();guard.beforeEach((to, from, next) =&gt; &#123; let currentTime = Date.now(); if (from.url &amp;&amp; from.url == &#x27;/pages/first/index&#x27;) &#123; next() return &#125; console.log(router) if (to.url) &#123; if (to.url.indexOf(&#x27;?&#x27;) &gt; -1) &#123; to.url = to.url.substr(0, to.url.indexOf(&#x27;?&#x27;)) &#125; &#125; let fromName = router.find(item =&gt; item.path == from.url) ? router.find(item =&gt; item.path == from.url).title : &#x27;未知&#x27; let toName = router.find(item =&gt; item.path == to.url) ? router.find(item =&gt; item.path == to.url).title : &#x27;未知&#x27; const stayTime= parseInt((currentTime - startTime) / 1000) const MY_NAMESPACE = &#x27;1b671a64-40d5-491e-99b0-da01ff1f3341&#x27;; console.log(`由$&#123;fromName&#125;跳转到$&#123;toName&#125;并在$&#123;fromName&#125;中停留了$&#123;stayTime&#125;秒钟`); let params = &#123; fromUrl: from.url, //来源地址 toUrl: to.url, // 目的地址 fromName: fromName, // 来源名称 toName: toName, // 目的名称 stayTime: stayTime, // 停留时长 guid: v5(from.url, MY_NAMESPACE), //页面uuid appUuid: uni.getStorageSync(&#x27;appUuid&#x27;) ? uni.getStorageSync(&#x27;appUuid&#x27;) : &#x27;&#x27;, // app唯一标识 model: uni.getStorageSync(&quot;model&quot;)? uni.getStorageSync(&#x27;model&#x27;) : &#x27;&#x27;, // 手机型号 &#125; console.log(params) if(stayTime&gt;10)&#123; // 上报逻辑 console.log(&#x27;停留的时间大于10秒钟了，可以进行上报&#x27;) &#125; startTime = Date.now(); next();&#125;); 因为uni-app没有提供自身的路由拦截插件🥠，所以需要我们手动去封装🚘。这种方案针对新项目比较合适，但是针对老项目路由跳转的逻辑都已经通过原生的方式写完了😣，我们在进行封装的话修改的点太多了🤔，所以在网上找到了这个插件不用修改跳转api并且可以获取到上一个页面的路由(全局路由守卫)，原文介绍的是通过npm的方式进行安装，我采用的是hbuilderX导入的方式（有需要的同学可以自行查找）🤙。 使用方法 事件埋点:将需要埋点的元素绑定改指令v-buried绑定参数 123456789101112&lt;!-- triggerType: 事件类型title: 页面标题currentUrl: 页面路由behavior: 操作行为--&gt;&lt;view v-buried=&quot;&#123;triggerType:&#x27;click&#x27;,title:&#x27;我的&#x27;,currentUrl: currentPath,behavior:&#x27;点击我的收藏按钮&#x27;&#125;&quot;&gt;&lt;/view&gt; 页面跳转 需要在page.json中进行修改如果使用的是自定义导航条或者没有使用导航条需要进行命名需要将页面中跳转路径修改成绝对路径否则路由会匹配不到 uni-app集成友盟统计 首先在友盟上创建一个应用获取其对应的appkey 在uni-app的App模块配置中勾选友盟统计并填写对应的key（渠道id随意填写就可以） 这样实际上就在uni-app中集成了友盟统计，如果想看到详细的上报数据可以在友盟后台进行查看（注：必须打包之后或者采用自定义基座的方式才能够进行上报，上报结果可能第二天才会生效，具体上报规则可以查看友盟官网解释）。 这样最基本的集成就完成了。 那我们如何埋入我们的自定义事件呢，比如我将一个燃气罩加入了购物车把他当成一个事件，并且能在友盟后台查看到我加入商品的属性以及加入空气炸锅或者加入电饼铛的一些数量对比 1.在友盟后台注册相应的自定义事件 （我的应用-&gt;设置-&gt;添加事件） 2.创建事件完毕之后在代码中进行上报的代码的编写（步骤一和步骤二谁先谁后都可以） 1234// https://www.html5plus.org/doc/zh_cn/statistic.html 文档链接// 第一个参数: 在友盟后台注册的事件id，第二个参数：业务数据plus.statistic.eventTrig(&quot;purchase&quot;, &#123;&quot;type&quot;:&quot;book&quot;,&quot;quantity&quot;:&quot;3&quot;&#125;);复制代码 上报可能会有延迟，发行过一段时间之后就可以在友盟后台查看到相关数据。 点击查看按钮可以看到更详细的数据，以及上报的业务数据对比 uni-app 自带统计 无需集成其他相关sdk只需在manifest.json中勾选uni统计配置即可注：必须打包之后才能够进行上报，上报结果可能第二天才会生效，具体上报规则可以查看uni-app官网解释） 查看上报后台 uni统计也支持自定义埋点事件的上报 12345// 注意如果第一个参数是title第二个参数必须是字符串uni.report(&quot;upload&quot;,&#123; title: &#x27;上报数据&#x27;, content: &#x27;上报内容&#x27; &#125;) 可在事件和转化模块中进行查看 在测试uni-app自带的统计中也遇到了一些问题，如果有朋友能够解决的话也可以帮助顶顶帖，我在进行完善问题贴。 总结 针对埋点的方案，自己也是不太熟悉，没有实战经验，找了很多途径，文中可能会有不对的地方，希望小伙伴们可以多多指点。一起加油！🤪","categories":[{"name":"vue2","slug":"vue2","permalink":"https://lin-xiuer.gitee.io/categories/vue2/"}],"tags":[{"name":"vue2","slug":"vue2","permalink":"https://lin-xiuer.gitee.io/tags/vue2/"}]},{"title":"vue3的7种路由守卫使用大全","slug":"vue3的7种路由守卫使用大全","date":"2022-12-16T09:32:27.412Z","updated":"2022-12-16T09:44:23.333Z","comments":true,"path":"2022/12/16/vue3的7种路由守卫使用大全/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/vue3%E7%9A%847%E7%A7%8D%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB%E4%BD%BF%E7%94%A8%E5%A4%A7%E5%85%A8/","excerpt":"路由守卫有哪几种？ 路由守卫(导航守卫)分为三种：全局守卫（3个）、路由独享守卫（1个）、组件的守卫（3个） 路由守卫的三个参数","text":"路由守卫有哪几种？ 路由守卫(导航守卫)分为三种：全局守卫（3个）、路由独享守卫（1个）、组件的守卫（3个） 路由守卫的三个参数 to：要跳转到的目标路由 from：从当前哪个路由进行跳转 next：不做任何阻拦，直接通行 注意： 必须要确保 next函数 在任何给定的导航守卫中都被调用过一次。它可以出现多次，但是只能在所有的逻辑路径都不重叠的情况下，否则会报错。案例： 1234router.beforeEach((to, from, next) =&gt; &#123; if (to.name !== &#x27;Login&#x27; &amp;&amp; !isAuthenticated) next(&#123; name: &#x27;Login&#x27; &#125;) else next()&#125;) 一、全局路由守卫 全局路由守卫有三个：全局前置守卫，全局后置守卫,全局解析守卫 全局前置守卫 1.使用方式：main.js中配置,在路由跳转前触发，这个钩子作用主要是用于登录验证，也就是路由还没跳转提前告知，以免跳转了再通知就为时已晚2.代码: 1router.beforeEach((to,from,next)=&gt;&#123;&#125;) 3.例子:做登录判断 123456789101112131415router.beforeEach((to,from,next)=&gt;&#123; if(to.path == &#x27;/login&#x27; || to.path == &#x27;/register&#x27;)&#123; next(); &#125;else&#123; alert(&#x27;您还没有登录，请先登录&#x27;); next(&#x27;/login&#x27;); &#125;&#125;) 全局后置守卫 1.使用方式：main.js中配置,和beforeEach相反，它是在路由跳转完成后触发，它发生在beforeEach和beforeResolve之后，beforeRouteEnter（组件内守卫）之前。钩子不会接受next函数也不会改变导航本身2.代码: 1router.afterEach((to,from)=&gt;&#123;&#125;) 全局解析守卫1.使用方式：main.js中配置,这个钩子和beforeEach类似，也是路由跳转前触发，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，即在 beforeEach 和 组件内beforeRouteEnter 之后，afterEach之前调用。2.代码: 1router.beforeResolve((to,from,next)=&gt;&#123;&#125;) 一、组件内守卫 组件内守卫有个三个：路由进入之前beforeRouteEnter，路由离开时beforeRouteLeave,页面更新时beforeRouteUpdate beforeRouteEnter(to, from, next)1.使用方式：在组件模板中使用,跟methods: {}等同级别书写，组件路由守卫是写在每个单独的vue文件里面的路由守卫2.代码:1234567beforeRouteEnter(to, from, next) &#123; // 在组件生命周期beforeCreate阶段触发 console.log(&#x27;组件内路由前置守卫 beforeRouteEnter&#x27;, this) // 访问不到this next((vm) =&gt; &#123; console.log(&#x27;组件内路由前置守卫 vm&#x27;, vm) // vm 就是this &#125;) &#125;, beforeRouteUpdate(to, from, next)1.使用方式：在组件模板中使用,跟methods: {}等同级别书写，组件路由守卫是写在每个单独的vue文件里面的路由守卫2.代码: 1234beforeRouteUpdate (to, from, next) &#123; // 同一页面，刷新不同数据时调用， // 可以访问组件实例 &#125; beforeRouteLeave(to, from, next)1.使用方式：在组件模板中使用,跟methods: {}等同级别书写，组件路由守卫是写在每个单独的vue文件里面的路由守卫2.代码: 1234beforeRouteLeave (to, from, next) &#123; // 导航离开该组件的对应路由时调用 // 可以访问组件实例&#125; 路由独享守卫 路由独享守卫只有一个:进入路由时触发beforeEnter 路由独享守卫 beforeEnter(to, from, next)1.使用方式：在router.js中使用,路由独享守卫是在路由配置页面单独给路由配置的一个守卫2.代码 12345678910111213const router = new VueRouter(&#123; routes: [ &#123; path: &#x27;/foo&#x27;, component: Foo, beforeEnter: (to, from, next) =&gt; &#123; // ... &#125; &#125; ]&#125;) 导航解析流程 1.触发进入其它路由2.调用要离开路由的组件守卫beforeRouteLeave3.调用全局的前置守卫beforeEach4.在重用的组件里调用 beforeRouteUpdate5.在路由配置里的单条路由调用 beforeEnter6.解析异步路由组件7.在将要进入的路由组件中调用beforeRouteEnter8.调用全局的解析守卫beforeResolve9.导航被确认10.调用全局的后置钩子afterEach11.触发 DOM 更新mounted12.执行beforeRouteEnter守卫中传给 next的回调函数 结尾: vue2和vue3的写法基本一致没有改变","categories":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/tags/vue/"}]},{"title":"在spring_boot项目中如何将vue组件引入到.html页面进行使用","slug":"在spring_boot项目中如何将vue组件引入到.html页面进行使用","date":"2022-12-16T09:32:27.409Z","updated":"2022-12-16T09:43:17.840Z","comments":true,"path":"2022/12/16/在spring_boot项目中如何将vue组件引入到.html页面进行使用/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/%E5%9C%A8spring_boot%E9%A1%B9%E7%9B%AE%E4%B8%AD%E5%A6%82%E4%BD%95%E5%B0%86vue%E7%BB%84%E4%BB%B6%E5%BC%95%E5%85%A5%E5%88%B0.html%E9%A1%B5%E9%9D%A2%E8%BF%9B%E8%A1%8C%E4%BD%BF%E7%94%A8/","excerpt":"开始我们需要导入我们的vue组件的路径到我们当前的js文件目录然后我们需要用到一个函数render进行渲染，将定义的组件写到createElements函数中去想要详细了解render函数的使用可以进入如图","text":"开始我们需要导入我们的vue组件的路径到我们当前的js文件目录然后我们需要用到一个函数render进行渲染，将定义的组件写到createElements函数中去想要详细了解render函数的使用可以进入如图 在这里我刁侃下我当时是想要通过components函数去添加组件到.html页面去但是失败了，所以才使用了render函数接着我们需要在.html文件进行引入我们.js文件 1&lt;script src=&quot;./webapp/static/dist/custom.js&quot;&gt;&lt;/script&gt; 我再body标签直接写&lt;div id=&quot;app&quot;&gt;&lt;/div&gt;就显示出来了,大功告成","categories":[{"name":"webpack","slug":"webpack","permalink":"https://lin-xiuer.gitee.io/categories/webpack/"},{"name":"工具","slug":"webpack/工具","permalink":"https://lin-xiuer.gitee.io/categories/webpack/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"spring_boot","slug":"spring-boot","permalink":"https://lin-xiuer.gitee.io/tags/spring-boot/"},{"name":"webpack","slug":"webpack","permalink":"https://lin-xiuer.gitee.io/tags/webpack/"}]},{"title":"vue无法创建项目create-vite-app projectName，提示错误：create-vite-app _ 无法加载文件 (1)","slug":"vue无法创建项目create-vite-app projectName，提示错误：create-vite-app _ 无法加载文件 (1)","date":"2022-12-16T09:32:27.404Z","updated":"2022-12-16T09:44:32.124Z","comments":true,"path":"2022/12/16/vue无法创建项目create-vite-app projectName，提示错误：create-vite-app _ 无法加载文件 (1)/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/vue%E6%97%A0%E6%B3%95%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AEcreate-vite-app%20projectName%EF%BC%8C%E6%8F%90%E7%A4%BA%E9%94%99%E8%AF%AF%EF%BC%9Acreate-vite-app%20_%20%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E6%96%87%E4%BB%B6%20(1)/","excerpt":"运行命令create-vite-app projectName创建项目控制台提示报错如下：报错原因：我的是windows10没有管理权限，所以我们需要用管理员身份打开权限","text":"运行命令create-vite-app projectName创建项目控制台提示报错如下：报错原因：我的是windows10没有管理权限，所以我们需要用管理员身份打开权限 操作如下：1.打开windows PowerShell右键点击看到以管理员身份运行点击后打开2.输入 set-ExecutionPolicy RemoteSigned运行然后出现以下界面再输入A或者Y即可成功然后我们在我们编辑器控制台重新输入上面的命令create-vite-app projectName创建文件即可成功","categories":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/tags/vue/"}]},{"title":"深入了解vue2向vue3变迁过渡的知识点","slug":"深入了解vue2向vue3变迁过渡的知识点","date":"2022-12-16T09:24:20.319Z","updated":"2022-12-16T09:25:11.396Z","comments":true,"path":"2022/12/16/深入了解vue2向vue3变迁过渡的知识点/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3vue2%E5%90%91vue3%E5%8F%98%E8%BF%81%E8%BF%87%E6%B8%A1%E7%9A%84%E7%9F%A5%E8%AF%86%E7%82%B9/","excerpt":"TypeScript 类型支持 vue2.x使用的是Flow来进行开发,但是flow对于一些复杂的场景flow支持的不是很好。 vue3.x中vue全面转向typescript，typescript提供了更好的类型检查，也支持复杂的类型推导。","text":"TypeScript 类型支持 vue2.x使用的是Flow来进行开发,但是flow对于一些复杂的场景flow支持的不是很好。 vue3.x中vue全面转向typescript，typescript提供了更好的类型检查，也支持复杂的类型推导。 vue3移除vue2的实例方法或修饰符 12345- $children已经被移除。如果要访问子组件，可以使用 $refs- $on、 $off、 $once 实例方法被移除- vue3对`filter`过滤器过滤器移除,建议议用方法调用或计算属性来替换它们- vue3 移除了 $listeners，封装进了 $attrs中- 移除了v-on.native 修饰符，触发可用emits对象暴露 watch监听数组 vue3当中，如果想要监听数组内容的变化那么必须要写deep。 v-if和v-for优先级已更改 vue2在同一元素v-for优先级高于v-if,vue3则相反，仍不建议在同一标签同时使用 性能优化 源码体积优化：移除冷门api、引入tree-shaking实行按需编译 数据劫持优化 proxy 编译优化：diff 算法优化 编译优化：PatchFlag(静态标记)、hoistStatic(静态提升)与渲染复用 cacheHandler 事件监听缓存 编译优化：Fragment SSR 服务端渲染 StaticNode(静态节点) slot 编译优化 生命周期的对比 beforeCreate -&gt; setup() created -&gt; setup() beforeDestroy -&gt; beforeUnmount destroyed -&gt; unmounted 创建VUE实例的对比 vue2创建 123456789import Vue from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import router from &#x27;./router&#x27;import store from &#x27;./store&#x27;Vue(&#123; router, store, render: h =&gt; h(App)&#125;).$mount(&#x27;#app&#x27;) vue3创建 123456789import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import router from &#x27;./router&#x27;import store from &#x27;./store&#x27;createApp(App,&#123; userName: &quot;sara&quot; &#125;).use(store).use(router).mount(&#x27;#app&#x27;) // createApp 方法返回应用实例本身，因此可以在其后链式调用其它方法 指令的变化 vue2.x 12345678// 注册一个全局自定义指令 `v-focus`Vue.directive(&#x27;focus&#x27;, &#123; // 当被绑定的元素插入到 DOM 中 inserted: function (el) &#123; // 聚焦元素 el.focus() &#125;&#125;) vue3.x 1234567const &#123; createApp &#125; from &quot;vue&quot;const app = createApp(&#123;&#125;)app.directive(&#x27;focus&#x27;, &#123; mounted(el) &#123; el.focus() &#125;&#125;) Hooks vue2使用的mixin,vue3提供了一种新的东西 ，叫做vue-hooks 响应式数据 在vue2中，实现数据监听使用的是Object.defineProperty。我们使用$set。vue3使用的是Proxy v-model 升级 变更：在自定义组件上使用v-model时， 属性以及事件的默认名称变了 变更：v-bind的.sync修饰符在 Vue 3 中又被去掉了, 合并到了v-model里 新增：同一组件可以同时设置多个 v-model 新增：开发者可以自定义 v-model修饰符 在 prop 的默认函数中访问this 生成 prop 默认值的工厂函数不再能访问 this。取而代之的是： 组件接收到的原始 prop 将作为参数传递给默认函数； inject API 可以在默认函数中使用。 12345678910111213import &#123; inject &#125; from &#x27;vue&#x27;export default &#123; props: &#123; theme: &#123; default (props) &#123; // `props` 是传递给组件的、 // 在任何类型/默认强制转换之前的原始值， // 也可以使用 `inject` 来访问注入的 property return inject(&#x27;theme&#x27;, &#x27;default-theme&#x27;) &#125; &#125; &#125;&#125; 插槽统一 此更改统一了 3.x 中的普通插槽和作用域插槽。以下是变化的变更总结： this.$slots 现在将插槽作为函数公开 非兼容：移除 this.$scopedSlots vue2.x 123456789101112&lt;!-- 当使用渲染函数，即 h 时，2.x 曾经在内容节点上定义 slot 数据 property。 --&gt;// 2.x 语法h(LayoutComponent, [ h(&#x27;div&#x27;, &#123; slot: &#x27;header&#x27; &#125;, this.header), h(&#x27;div&#x27;, &#123; slot: &#x27;content&#x27; &#125;, this.content)])&lt;!-- 此外，可以使用以下语法引用作用域插槽： --&gt;// 2.x 语法this.$scopedSlots.header vue3.x 12345678910111213141516&lt;!-- 在 3.x 中，插槽以对象的形式定义为当前节点的子节点： --&gt;// 3.x Syntaxh(LayoutComponent, &#123;&#125;, &#123; header: () =&gt; h(&#x27;div&#x27;, this.header), content: () =&gt; h(&#x27;div&#x27;, this.content)&#125;)&lt;!-- 当你需要以编程方式引用作用域插槽时，它们现在被统一到 $slots 选项中了。 --&gt;// 2.x 语法this.$scopedSlots.header// 3.x 语法this.$slots.header() 过渡的class名更改 过渡类名 v-enter 修改为 v-enter-from、过渡类名 v-leave 修改为 v-leave-from。 vue2.x 1234567891011121314&lt;!-- 在 v2.1.8 版本之前，每个过渡方向都有两个过渡类：初始状态与激活状态。 --&gt;&lt;!-- 在 v2.1.8 版本中，引入了 v-enter-to 来定义 enter 或 leave 变换之间的过渡动画插帧。然而，为了向下兼容，并没有变动 v-enter 类名： --&gt;.v-enter,.v-leave-to &#123; opacity: 0;&#125;.v-leave,.v-enter-to &#123; opacity: 1;&#125;&lt;!-- 这样做会带来很多困惑，类似 enter 和 leave 含义过于宽泛，并且没有遵循类名钩子的命名约定。 --&gt; vue3.x 12345678910111213&lt;!-- 为了更加明确易读，我们现在将这些初始状态重命名为： --&gt;.v-enter-from,.v-leave-to &#123; opacity: 0;&#125;.v-leave-from,.v-enter-to &#123; opacity: 1;&#125;&lt;!-- 现在，这些状态之间的区别就清晰多了。 --&gt; Transition 作为根节点 1当使用 &lt;transition&gt; 作为根结点的组件从外部被切换时将不再触发过渡效果 vue2.x 123456789101112&lt;!-- 在 Vue 2 中，通过使用 &lt;transition&gt; 作为一个组件的根节点，过渡效果存在从组件外部触发的可能性： --&gt;&lt;!-- 模态组件 --&gt;&lt;template&gt; &lt;transition&gt; &lt;div class=&quot;modal&quot;&gt;&lt;slot/&gt;&lt;/div&gt; &lt;/transition&gt;&lt;/template&gt;&lt;!-- 用法 --&gt;&lt;modal v-if=&quot;showModal&quot;&gt;hello&lt;/modal&gt;&lt;!-- 切换 showModal 的值将会在模态组件内部触发一个过渡效果。这是无意为之的，并不是设计效果。一个 &lt;transition&gt; 原本是希望被其子元素触发的，而不是 &lt;transition&gt; 自身。这个怪异的现象现在被移除了。 --&gt; vue3.x 1234567891011121314&lt;!-- 换做向组件传递一个 prop 就可以达到类似的效果： --&gt;&lt;template&gt; &lt;transition&gt; &lt;div v-if=&quot;show&quot; class=&quot;modal&quot;&gt;&lt;slot/&gt;&lt;/div&gt; &lt;/transition&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props: [&#x27;show&#x27;]&#125;&lt;/script&gt;&lt;!-- 用法 --&gt;&lt;modal :show=&quot;showModal&quot;&gt;hello&lt;/modal&gt; Transition Group 根元素 1&lt;transition-group&gt; 不再默认渲染根元素，但仍然可以用 tag attribute 创建根元素 vue2.x 123456&lt;!-- 默认情况下，传递给带有 v-on 的组件的事件监听器只能通过 this.$emit 触发。要将原生 DOM 监听器添加到子组件的根元素中，可以使用 .native 修饰符： --&gt;&lt;my-component v-on:close=&quot;handleComponentEvent&quot; v-on:click.native=&quot;handleNativeClickEvent&quot;/&gt; vue3.x 12345678910111213141516&lt;!-- v-on 的 .native 修饰符已被移除。同时，新增的 emits 选项允许子组件定义真正会被触发的事件。 --&gt;&lt;!-- 因此，对于子组件中未被定义为组件触发的所有事件监听器，Vue 现在将把它们作为原生事件监听器添加到子组件的根元素中 (除非在子组件的选项中设置了 inheritAttrs: false)。 --&gt;&lt;my-component v-on:close=&quot;handleComponentEvent&quot; v-on:click=&quot;handleNativeClickEvent&quot;/&gt;// MyComponent.vue&lt;script&gt; export default &#123; emits: [&#x27;close&#x27;] &#125;&lt;/script&gt;","categories":[{"name":"vue3","slug":"vue3","permalink":"https://lin-xiuer.gitee.io/categories/vue3/"}],"tags":[{"name":"vue3","slug":"vue3","permalink":"https://lin-xiuer.gitee.io/tags/vue3/"}]},{"title":"简单搭建一个vue3项目","slug":"简单搭建一个vue3项目","date":"2022-12-16T09:24:20.296Z","updated":"2022-12-16T09:24:50.829Z","comments":true,"path":"2022/12/16/简单搭建一个vue3项目/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/%E7%AE%80%E5%8D%95%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAvue3%E9%A1%B9%E7%9B%AE/","excerpt":"第一步 1$ npm i -g @vue/cli //全局安装最新vue构建工具 (默认最新) vuecli安装成功如下","text":"第一步 1$ npm i -g @vue/cli //全局安装最新vue构建工具 (默认最新) vuecli安装成功如下 第二步 1$ vue create testvue3 //创建一个名为testvue3的项目 第三步执行$ cd testvue3 和$ npm run serve 命令 第五步 代码文件报错 Parsing error: No Babel config file detected forD:\\xk-project\\demo\\vue.config.js. Either disable config file checkingwith requireConfigFile: false, or configure Babel so that it can findthe config files.eslint 在package.json文件,按照下图指示添加”requireConfigFile” : false","categories":[{"name":"vue3","slug":"vue3","permalink":"https://lin-xiuer.gitee.io/categories/vue3/"}],"tags":[{"name":"vue3","slug":"vue3","permalink":"https://lin-xiuer.gitee.io/tags/vue3/"}]},{"title":"新员工webpack打包后上传服务器页面空白","slug":"新员工webpack打包后上传服务器页面空白","date":"2022-12-16T09:17:39.969Z","updated":"2022-12-16T09:20:59.049Z","comments":true,"path":"2022/12/16/新员工webpack打包后上传服务器页面空白/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/%E6%96%B0%E5%91%98%E5%B7%A5webpack%E6%89%93%E5%8C%85%E5%90%8E%E4%B8%8A%E4%BC%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%A1%B5%E9%9D%A2%E7%A9%BA%E7%99%BD/","excerpt":"某天同事小白使用了webpack开发vue项目，在项目开发完成后，使用命令：npm run build对项目进行打包后发布服务器页面显示空白 排查后发现：webpack打包的时候引入js时使用的是绝对路径导致的","text":"某天同事小白使用了webpack开发vue项目，在项目开发完成后，使用命令：npm run build对项目进行打包后发布服务器页面显示空白 排查后发现：webpack打包的时候引入js时使用的是绝对路径导致的 解决方案如下 修改webpack打包文件中的配置： webpack.prod.conf.js中增加publicPath:’.&#x2F;’ ； util.js中增加publicPath:’.&#x2F;’；(可选用或不用) config&#x2F;index.js修改assetsPublicPath：‘.&#x2F;’;","categories":[{"name":"github","slug":"github","permalink":"https://lin-xiuer.gitee.io/categories/github/"},{"name":"工具","slug":"github/工具","permalink":"https://lin-xiuer.gitee.io/categories/github/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"github","slug":"github","permalink":"https://lin-xiuer.gitee.io/tags/github/"},{"name":"(TortoiseGit)小乌龟","slug":"TortoiseGit-小乌龟","permalink":"https://lin-xiuer.gitee.io/tags/TortoiseGit-%E5%B0%8F%E4%B9%8C%E9%BE%9F/"}]},{"title":"Git小乌龟(TortoiseGit) 简单提交代码到github","slug":"Git小乌龟(TortoiseGit) 简单提交代码到github","date":"2022-12-16T09:17:39.943Z","updated":"2022-12-16T09:21:05.760Z","comments":true,"path":"2022/12/16/Git小乌龟(TortoiseGit) 简单提交代码到github/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/Git%E5%B0%8F%E4%B9%8C%E9%BE%9F(TortoiseGit)%20%E7%AE%80%E5%8D%95%E6%8F%90%E4%BA%A4%E4%BB%A3%E7%A0%81%E5%88%B0github/","excerpt":"前言:由于提交代码到github时总是要提示验证登录,所以使用ssh提交方式 第一步:检查本地主机是否已经存在ssh key 123cd ~/.sshls//看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key","text":"前言:由于提交代码到github时总是要提示验证登录,所以使用ssh提交方式 第一步:检查本地主机是否已经存在ssh key 123cd ~/.sshls//看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key 第二步：生成ssh key如果不存在ssh key，使用如下命令生成 12ssh-keygen -t rsa -C &quot;xxx@xxx.com&quot;//执行后一直回车即可 生成完以后再用第二步命令，查看ssh key 第三步：获取ssh key公钥内容（id_rsa.pub） 12cd ~/.sshcat id_rsa.pub 如下图所示，复制该内容第四步：Github账号上添加公钥进入Settings设置添加ssh key，把刚才复制的内容粘贴上去保存即可第五步：验证是否设置成功 1ssh -T git@github.com 显示如下信息表明设置成功设置成功后，即可不需要账号密码clone和push代码注意之后在clone仓库的时候要使用ssh的url，而不是https！ 第六步:小乌龟TortoiseGit配置:验证原理 SSH登录安全性由非对称加密保证，产生密钥时，一次产生两个密钥，一个公钥，一个私钥，在git中一般命名为id_rsa.pub,id_rsa 那么如何使用生成的一个私钥一个公钥进行验证呢？ 本地生成一个密钥对，其中公钥放到远程主机，私钥保存在本地 当本地主机需要登录远程主机时，本地主机向远程主机发送一个登录请求，远程收到消息后，随机生成一个字符串并用公钥加密，发回给本地。本地拿到该字符串，用存放在本地的私钥进行解密，再次发送到远程，远程比对该解密后的字符串与源字符串是否等同，如果等同则认证成功。 参考链接跳转","categories":[{"name":"github","slug":"github","permalink":"https://lin-xiuer.gitee.io/categories/github/"},{"name":"工具","slug":"github/工具","permalink":"https://lin-xiuer.gitee.io/categories/github/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"github","slug":"github","permalink":"https://lin-xiuer.gitee.io/tags/github/"},{"name":"(TortoiseGit)小乌龟","slug":"TortoiseGit-小乌龟","permalink":"https://lin-xiuer.gitee.io/tags/TortoiseGit-%E5%B0%8F%E4%B9%8C%E9%BE%9F/"}]},{"title":"vscode关于vue项目无法将文件push到github的错误命令","slug":"vscode关于vue项目无法将文件push到github的错误命令","date":"2022-12-16T09:17:39.922Z","updated":"2022-12-16T09:21:23.735Z","comments":true,"path":"2022/12/16/vscode关于vue项目无法将文件push到github的错误命令/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/vscode%E5%85%B3%E4%BA%8Evue%E9%A1%B9%E7%9B%AE%E6%97%A0%E6%B3%95%E5%B0%86%E6%96%87%E4%BB%B6push%E5%88%B0github%E7%9A%84%E9%94%99%E8%AF%AF%E5%91%BD%E4%BB%A4/","excerpt":"错误提示一: remote: Invalid username or password.fatal: Authentication failed for ‘https://github.com/linweiqian/master.git/‘ 错误提示二: fatal: ‘origin’ does not appear to be a git repositoryfatal: Could not read from remote repository.","text":"错误提示一: remote: Invalid username or password.fatal: Authentication failed for ‘https://github.com/linweiqian/master.git/‘ 错误提示二: fatal: ‘origin’ does not appear to be a git repositoryfatal: Could not read from remote repository. 错误提示三: Please make sure you have the correct access rightsand the repository exists. 错误提示四: fatal: unable to access ‘https://github.com/linweiqian/master.git/‘: Failed to connect to 127.0.0.1 port 1080: Connection refused 错误提示五: On branch master,nothing to commit, working tree clean 错误提示六： fatal: remote origin already exists. 解决办法 重置设置 1git config --global credential.helper store","categories":[{"name":"github","slug":"github","permalink":"https://lin-xiuer.gitee.io/categories/github/"}],"tags":[{"name":"github","slug":"github","permalink":"https://lin-xiuer.gitee.io/tags/github/"}]},{"title":"vscode 如何将项目放到github上","slug":"vscode 如何将项目放到github上","date":"2022-12-16T09:17:39.909Z","updated":"2022-12-16T09:20:31.956Z","comments":true,"path":"2022/12/16/vscode 如何将项目放到github上/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/vscode%20%E5%A6%82%E4%BD%95%E5%B0%86%E9%A1%B9%E7%9B%AE%E6%94%BE%E5%88%B0github%E4%B8%8A/","excerpt":"","text":"首先第一步在github上面创建一个储存库如下操作进入一个新的页面有代码提示如下我们去到我们的vscode项目，在控制台安装上面的提示顺序输入命令就可以完成项目推送","categories":[{"name":"github","slug":"github","permalink":"https://lin-xiuer.gitee.io/categories/github/"}],"tags":[{"name":"github","slug":"github","permalink":"https://lin-xiuer.gitee.io/tags/github/"}]},{"title":"6种解决移动端1px的方案","slug":"6种解决移动端1px的方案","date":"2022-12-16T09:13:18.204Z","updated":"2022-12-16T09:20:48.835Z","comments":true,"path":"2022/12/16/6种解决移动端1px的方案/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/6%E7%A7%8D%E8%A7%A3%E5%86%B3%E7%A7%BB%E5%8A%A8%E7%AB%AF1px%E7%9A%84%E6%96%B9%E6%A1%88/","excerpt":"在CSS中我们一般使用px作为单位，需要注意的是，CSS样式里面的px和物理像素并不是相等的。CSS中的像素只是一个抽象的单位，在不同的设备或不同的环境中，CSS中的1px所代表的物理像素是不同的。在PC端，CSS的1px一般对应着电脑屏幕的1个物理像素，但在移动端，CSS的1px等于几个物理像素。 一、伪元素+transform(常用) 构建1个伪元素, border为1px, 再以transform缩放到50%。 对于老项目，有没有什么办法能兼容1px的尴尬问题了，个人认为伪类+transform是比较完美的方法了。 原理是把原先元素的 border去掉，然后利用 :before 或者 :after 重做 border ，并将 transform 的 scale缩小一半，原先的元素相对定位，新做的 border 绝对定位。","text":"在CSS中我们一般使用px作为单位，需要注意的是，CSS样式里面的px和物理像素并不是相等的。CSS中的像素只是一个抽象的单位，在不同的设备或不同的环境中，CSS中的1px所代表的物理像素是不同的。在PC端，CSS的1px一般对应着电脑屏幕的1个物理像素，但在移动端，CSS的1px等于几个物理像素。 一、伪元素+transform(常用) 构建1个伪元素, border为1px, 再以transform缩放到50%。 对于老项目，有没有什么办法能兼容1px的尴尬问题了，个人认为伪类+transform是比较完美的方法了。 原理是把原先元素的 border去掉，然后利用 :before 或者 :after 重做 border ，并将 transform 的 scale缩小一半，原先的元素相对定位，新做的 border 绝对定位。 单条border样式设置： 12345678910111213141516.scale-1px&#123; position: relative; border:none;&#125;.scale-1px:after&#123; content: &#x27;&#x27;; position: absolute; bottom: 0; background: #000; width: 100%; height: 1px; -webkit-transform: scaleY(0.5); transform: scaleY(0.5); -webkit-transform-origin: 0 0; transform-origin: 0 0;&#125; 四条boder样式设置: 1234567891011121314151617181920.scale-1px&#123; position: relative; margin-bottom: 20px; border:none;&#125;.scale-1px:after&#123; content: &#x27;&#x27;; position: absolute; top: 0; left: 0; border: 1px solid #000; -webkit-box-sizing: border-box; box-sizing: border-box; width: 200%; height: 200%; -webkit-transform: scale(0.5); transform: scale(0.5); -webkit-transform-origin: left top; transform-origin: left top;&#125; 最好在使用前也判断一下，结合 JS 代码，判断是否 Retina 屏： 123if(window.devicePixelRatio &amp;&amp; devicePixelRatio &gt;= 2)&#123; document.querySelector(&#x27;ul&#x27;).className = &#x27;scale-1px&#x27;;&#125; 优点：可以满足所有场景，且修改灵活。 缺点：对于已使用伪类的元素（例如clearfix）要多层嵌套。 二、viewport + rem 实现(常用) 同时通过设置对应viewport的rem基准值，这种方式就可以像以前一样轻松愉快的写1px了。 在devicePixelRatio &#x3D; 2 时，输出viewport： 12&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no&quot;&gt; 在devicePixelRatio &#x3D; 3 时，输出viewport： 1&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no&quot;&gt; 这种兼容方案相对比较完美，适合新的项目，老的项目修改成本过大。 优点： 所有场景都能满足一套代码，可以兼容基本所有布局 缺点： 老项目修改代价过大，只适用于新项目 三、使用border-image实现 准备一张符合你要求的border-image： 12345.border-bottom-1px &#123; border-width: 0 0 1px 0; -webkit-border-image: url(linenew.png) 0 0 2 0 stretch; border-image: url(linenew.png) 0 0 2 0 stretch;&#125; 上文是把border设置在边框的底部，所以使用的图片是2px高，上部的1px颜色为透明，下部的1px使用视觉规定的border的颜色。 优点： 可以设置单条、多条表框。 缺点： 更换颜色和样式麻烦，需要更改图片；某些设备上会模糊。 四、使用background-image实现 background-image 跟border-image的方法一样，你要先准备一张符合你要求的图片。然后将边框模拟在背景上。 样式设置： 1234567.background-image-1px &#123; background: url(../img/line.png) repeat-x left bottom; -webkit-background-size: 100% 1px; background-size: 100% 1px;&#125; 优缺点与border-image一样； 五、多背景渐变实现 与background-image方案类似，只是将图片替换为css3渐变。设置1px的渐变背景，50%有颜色，50%透明。 样式设置： 123456789101112131415.background-gradient-1px &#123; background: linear-gradient(#000, #000 100%, transparent 100%) left / 1px 100% no-repeat, linear-gradient(#000, #000 100%, transparent 100%) right / 1px 100% no-repeat, linear-gradient(#000,#000 100%, transparent 100%) top / 100% 1px no-repeat, linear-gradient(#000,#000 100%, transparent 100%) bottom / 100% 1px no-repeat&#125;/* 或者 */.background-gradient-1px&#123; background: -webkit-gradient(linear, left top, right bottom, color-stop(0, transparent), color-stop(0, #000), to(#000)) left / 1px 100% no-repeat, -webkit-gradient(linear, left top, right bottom, color-stop(0, transparent), color-stop(0, #000), to(#000)) right / 1px 100% no-repeat, -webkit-gradient(linear, left top, right bottom, color-stop(0, transparent), color-stop(0, #000), to(#000)) top / 100% 1px no-repeat, -webkit-gradient(linear, left top, right bottom, color-stop(0, transparent), color-stop(0, #000), to(#000)) bottom / 100% 1px no-repeat&#125; 优点： 可以实现单条、多条边框边框的颜色随意设置 缺点： 代码量不少圆角没法实现多背景图片有兼容性问题 六、使用box-shadow模拟边框 利用css 对阴影处理的方式实现0.5px的效果 样式设置： 123.box-shadow-1px &#123; box-shadow: inset 0px -1px 1px -1px #c8c7cc;&#125; 优点：代码少，兼容性好。 缺点：边框有阴影，颜色变浅。","categories":[{"name":"javascript","slug":"javascript","permalink":"https://lin-xiuer.gitee.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://lin-xiuer.gitee.io/tags/javascript/"}]},{"title":"温故而知新《9种js数组去重方法》","slug":"温故而知新《9种js数组去重方法》","date":"2022-12-16T09:13:18.184Z","updated":"2022-12-16T09:20:53.401Z","comments":true,"path":"2022/12/16/温故而知新《9种js数组去重方法》/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/%E6%B8%A9%E6%95%85%E8%80%8C%E7%9F%A5%E6%96%B0%E3%80%8A9%E7%A7%8Djs%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%96%B9%E6%B3%95%E3%80%8B/","excerpt":"一、利用 ES6 Set 去重（ES6 中最常用） 123456function unique (arr) &#123; return Array.from(new Set(arr))&#125;var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;];console.log(unique(arr)) //[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;] 特点:不考虑兼容性，这种去重的方法代码最少。这种方法还无法去掉 &#123;&#125; 空对象，后面的高阶方法会添加去掉重复 &#123;&#125; 的方法。","text":"一、利用 ES6 Set 去重（ES6 中最常用） 123456function unique (arr) &#123; return Array.from(new Set(arr))&#125;var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;];console.log(unique(arr)) //[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;] 特点:不考虑兼容性，这种去重的方法代码最少。这种方法还无法去掉 &#123;&#125; 空对象，后面的高阶方法会添加去掉重复 &#123;&#125; 的方法。 二、利用 for 嵌套 for，然后 splice 去重（ES5 中最常用） 123456789101112131415function unique(arr)&#123; for(var i=0; i&lt;arr.length; i++)&#123; for(var j=i+1; j&lt;arr.length; j++)&#123; if(arr[i]==arr[j])&#123; //第一个等同于第二个，splice方法删除第二个 arr.splice(j,1); j--; &#125; &#125; &#125;return arr;&#125;var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;]; console.log(unique(arr)) //[1, &quot;true&quot;, 15, false, undefined, NaN, NaN, &quot;NaN&quot;, &quot;a&quot;, &#123;&#125;, &#123;&#125;] 特点:双层循环，外层循环元素，内层循环时比较值。值相同时，则删去这个值。NaN和{}没有去重，两个null直接消失了 三、利用 indexOf 去重 1234567891011121314151617function unique(arr) &#123; if (!Array.isArray(arr)) &#123; console.log(&#x27;type error!&#x27;) return &#125; var array = []; for (var i = 0; i &lt; arr.length; i++) &#123; if (array .indexOf(arr[i]) === -1) &#123; array .push(arr[i]) &#125; &#125; return array;&#125;var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;];console.log(unique(arr)) // [1, &quot;true&quot;, true, 15, false, undefined, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;] 特点:新建一个空的结果数组，for 循环原数组，判断结果数组是否存在当前元素，如果有相同的值则跳过，不相同则 push 进数组。NaN、{}没有去重。 四、利用 sort() 123456789101112131415161718function unique(arr) &#123; if (!Array.isArray(arr)) &#123; console.log(&#x27;type error!&#x27;) return; &#125; arr = arr.sort() var arrry= [arr[0]]; for (var i = 1; i &lt; arr.length; i++) &#123; if (arr[i] !== arr[i-1]) &#123; arrry.push(arr[i]); &#125; &#125; return arrry;&#125; var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;]; console.log(unique(arr))// [0, 1, 15, &quot;NaN&quot;, NaN, NaN, &#123;&#125;, &#123;&#125;, &quot;a&quot;, false, null, true, &quot;true&quot;, undefined] 特点:利用 sort() 排序方法，然后根据排序后的结果进行遍历及相邻元素比对。NaN、{}没有去重。 五、利用 includes() 1234567891011121314151617function unique(arr) &#123; if (!Array.isArray(arr)) &#123; console.log(&#x27;type error!&#x27;) return &#125; var array =[]; for(var i = 0; i &lt; arr.length; i++) &#123; if( !array.includes( arr[i]) ) &#123;//includes 检测数组是否有某个值 array.push(arr[i]); &#125; &#125; return array&#125;var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;]; console.log(unique(arr)) //[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;] 特点: {}没有去重 六、利用 hasOwnProperty 12345678910function unique(arr) &#123; var obj = &#123;&#125;; return arr.filter(function(item, index, arr)&#123; return obj.hasOwnProperty(typeof item + item) ? false : (obj[typeof item + item] = true) &#125;)&#125; var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;]; console.log(unique(arr))//[1, &quot;true&quot;, true, 15, false, undefined, null, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;] 特点:利用 hasOwnProperty 判断是否存在对象属性,所有的都去重了 七、 利用 filter 12345678910function unique(arr) &#123; return arr.filter(function(item, index, arr) &#123; //当前元素，在原始数组中的第一个索引==当前索引值，否则返回当前元素 return arr.indexOf(item, 0) === index; &#125;);&#125; var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;]; console.log(unique(arr))//[1, &quot;true&quot;, true, 15, false, undefined, null, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, &#123;&#125;] 特点:利用 filter过滤的方法通过索引比对，{}没有去重 八、 利用递归去重 1234567891011121314151617181920212223function unique(arr) &#123; var array= arr; var len = array.length; array.sort(function(a,b)&#123; //排序后更加方便去重 return a - b; &#125;) function loop(index)&#123; if(index &gt;= 1)&#123; if(array[index] === array[index-1])&#123; array.splice(index,1); &#125; loop(index - 1); //递归loop，然后数组去重 &#125; &#125; loop(len-1); return array;&#125; var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;];console.log(unique(arr))//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, undefined] 特点:{},NaN没有去重 九、利用 Map 数据结构去重 1234567891011121314151617function arrayNonRepeatfy(arr) &#123; let map = new Map(); let array = new Array(); // 数组用于返回结果 for (let i = 0; i &lt; arr.length; i++) &#123; if(map .has(arr[i])) &#123; // 如果有该key值 map .set(arr[i], true); &#125; else &#123; map .set(arr[i], false); // 如果没有该key值 array .push(arr[i]); &#125; &#125; return array ;&#125; var arr = [1,1,&#x27;true&#x27;,&#x27;true&#x27;,true,true,15,15,false,false, undefined,undefined, null,null, NaN, NaN,&#x27;NaN&#x27;, 0, 0, &#x27;a&#x27;, &#x27;a&#x27;,&#123;&#125;,&#123;&#125;]; console.log(unique(arr))//[1, &quot;a&quot;, &quot;true&quot;, true, 15, false, 1, &#123;&#125;, null, NaN, NaN, &quot;NaN&quot;, 0, &quot;a&quot;, &#123;&#125;, undefined] 特点:创建一个空 Map 数据结构，遍历需要去重的数组，把数组的每一个元素作为 key 存到 Map 中。由于 Map 中不会出现相同的 key 值，所以最终得到的就是去重后的结果。NaN,{}没有去重","categories":[{"name":"javascript","slug":"javascript","permalink":"https://lin-xiuer.gitee.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://lin-xiuer.gitee.io/tags/javascript/"}]},{"title":"js解决移动端在iOS和android 监听软键盘弹起、收起","slug":"js解决移动端在iOS和android 监听软键盘弹起、收起","date":"2022-12-16T09:13:18.168Z","updated":"2022-12-16T09:43:51.745Z","comments":true,"path":"2022/12/16/js解决移动端在iOS和android 监听软键盘弹起、收起/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/js%E8%A7%A3%E5%86%B3%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%9C%A8iOS%E5%92%8Candroid%20%E7%9B%91%E5%90%AC%E8%BD%AF%E9%94%AE%E7%9B%98%E5%BC%B9%E8%B5%B7%E3%80%81%E6%94%B6%E8%B5%B7/","excerpt":"1.在ios中软键盘弹起时，仅会引起$(‘body’).scrollTop值改变，但是我们可以通过输入框的获取焦点情况来做判断，但也只能在ios中采用这个方案，因为在android中存在主动收起键盘后，但输入框并没有失焦，而ios中键盘收起后就会失焦；2.在android中软键盘弹起或收起时，会改变window的高度，因此监听window的onresize事件；","text":"1.在ios中软键盘弹起时，仅会引起$(‘body’).scrollTop值改变，但是我们可以通过输入框的获取焦点情况来做判断，但也只能在ios中采用这个方案，因为在android中存在主动收起键盘后，但输入框并没有失焦，而ios中键盘收起后就会失焦；2.在android中软键盘弹起或收起时，会改变window的高度，因此监听window的onresize事件； 123456789101112131415161718192021222324252627282930## 一、Android//获取原窗口的高度var originalHeight=document.documentElement.clientHeight ||document.body.clientHeight;window.onresize=function()&#123; //键盘弹起与隐藏都会引起窗口的高度发生变化 var resizeHeight=document.documentElement.clientHeight || document.body.clientHeight; if(resizeHeight-0&lt;originalHeight-0)&#123; //当软键盘弹起，在此处操作 &#125;else&#123; //当软键盘收起，在此处操作 &#125;&#125;## 二、iosfocusin和focusout支持冒泡，对应focus和blur, 使用focusin和focusout的原因是focusin和focusout可以冒泡，focus和blur不会冒泡，这样就可以使用事件代理，处理多个输入框存在的情况。 document.body.addEventListener(&#x27;focusin&#x27;, () =&gt; &#123; //软键盘弹出的事件处理 if(isIphone()）&#123; &#125; &#125;) document.body.addEventListener(&#x27;focusout&#x27;, () =&gt; &#123; //软键盘收起的事件处理 if(isIphone()）&#123; &#125; &#125;)","categories":[{"name":"javascript","slug":"javascript","permalink":"https://lin-xiuer.gitee.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://lin-xiuer.gitee.io/tags/javascript/"}]},{"title":"javascript 验证是否是手机号并封装","slug":"javascript 验证是否是手机号并封装","date":"2022-12-16T09:13:18.152Z","updated":"2022-12-16T09:14:41.572Z","comments":true,"path":"2022/12/16/javascript 验证是否是手机号并封装/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/javascript%20%E9%AA%8C%E8%AF%81%E6%98%AF%E5%90%A6%E6%98%AF%E6%89%8B%E6%9C%BA%E5%8F%B7%E5%B9%B6%E5%B0%81%E8%A3%85/","excerpt":"","text":"123456789//验证是否是手机号function isPhoneNumber(str)&#123; var myreg = /^[1][3,4,5,6,7,8,9][0-9]&#123;9&#125;$/; if (!myreg.test(str)) &#123; return false; &#125; else &#123; return true; &#125;&#125;","categories":[{"name":"javascript","slug":"javascript","permalink":"https://lin-xiuer.gitee.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://lin-xiuer.gitee.io/tags/javascript/"}]},{"title":"js对H5链接url进行解密实现过程(vue)","slug":"js对H5链接url进行解密实现过程(vue)","date":"2022-12-16T09:13:18.135Z","updated":"2022-12-16T09:21:14.324Z","comments":true,"path":"2022/12/16/js对H5链接url进行解密实现过程(vue)/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/16/js%E5%AF%B9H5%E9%93%BE%E6%8E%A5url%E8%BF%9B%E8%A1%8C%E8%A7%A3%E5%AF%86%E5%AE%9E%E7%8E%B0%E8%BF%87%E7%A8%8B(vue)/","excerpt":"https.js文件 123456789101112131415161718import Vue from &#x27;vue&#x27;export default &#123; install(Vue) &#123; Vue.prototype.$getQueryVariable = getQueryVariable &#125;&#125;;//关键部分function getQueryVariable(queryParams, query) &#123; const query1 = query || window.location.search.substring(1); const vars = query1.split(&quot;&amp;&quot;); for (let i = 0; i &lt; vars.length; i++) &#123; const pair = vars[i].split(&quot;=&quot;); if (pair[0] === queryParams) &#123; return pair[1]; &#125; &#125; return &#x27;&#x27;;&#125;","text":"https.js文件 123456789101112131415161718import Vue from &#x27;vue&#x27;export default &#123; install(Vue) &#123; Vue.prototype.$getQueryVariable = getQueryVariable &#125;&#125;;//关键部分function getQueryVariable(queryParams, query) &#123; const query1 = query || window.location.search.substring(1); const vars = query1.split(&quot;&amp;&quot;); for (let i = 0; i &lt; vars.length; i++) &#123; const pair = vars[i].split(&quot;=&quot;); if (pair[0] === queryParams) &#123; return pair[1]; &#125; &#125; return &#x27;&#x27;;&#125; vue文件使用部分 123456let Base64 = require(&#x27;js-base64&#x27;).Base64;let query = Base64.decode(window.location.search.substring(1).split(&#x27;&amp;&#x27;)[0]);//使用例子//对url解码并匹配type的值const type = this.$getQueryVariable(&#x27;type&#x27;, query);","categories":[{"name":"javascript","slug":"javascript","permalink":"https://lin-xiuer.gitee.io/categories/javascript/"}],"tags":[{"name":"javascript","slug":"javascript","permalink":"https://lin-xiuer.gitee.io/tags/javascript/"}]},{"title":"Hello Hexo","slug":"hello-world","date":"2022-12-13T16:13:36.883Z","updated":"2022-12-16T09:35:42.690Z","comments":true,"path":"2022/12/14/hello-world/","link":"","permalink":"https://lin-xiuer.gitee.io/2022/12/14/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. 快速开始 Create a new post 1$ hexo new &quot;My New Post&quot; More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment","categories":[{"name":"工具","slug":"工具","permalink":"https://lin-xiuer.gitee.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"工具","slug":"工具","permalink":"https://lin-xiuer.gitee.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"记录","slug":"记录","permalink":"https://lin-xiuer.gitee.io/tags/%E8%AE%B0%E5%BD%95/"},{"name":"hexo","slug":"hexo","permalink":"https://lin-xiuer.gitee.io/tags/hexo/"},{"name":"stun","slug":"stun","permalink":"https://lin-xiuer.gitee.io/tags/stun/"}]}],"categories":[{"name":"八股文","slug":"八股文","permalink":"https://lin-xiuer.gitee.io/categories/%E5%85%AB%E8%82%A1%E6%96%87/"},{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/categories/vue/"},{"name":"vue2","slug":"vue2","permalink":"https://lin-xiuer.gitee.io/categories/vue2/"},{"name":"vue3","slug":"vue2/vue3","permalink":"https://lin-xiuer.gitee.io/categories/vue2/vue3/"},{"name":"javascript","slug":"vue2/vue3/javascript","permalink":"https://lin-xiuer.gitee.io/categories/vue2/vue3/javascript/"},{"name":"threejs","slug":"vue/threejs","permalink":"https://lin-xiuer.gitee.io/categories/vue/threejs/"},{"name":"webpack","slug":"webpack","permalink":"https://lin-xiuer.gitee.io/categories/webpack/"},{"name":"工具","slug":"webpack/工具","permalink":"https://lin-xiuer.gitee.io/categories/webpack/%E5%B7%A5%E5%85%B7/"},{"name":"vue3","slug":"vue3","permalink":"https://lin-xiuer.gitee.io/categories/vue3/"},{"name":"github","slug":"github","permalink":"https://lin-xiuer.gitee.io/categories/github/"},{"name":"工具","slug":"github/工具","permalink":"https://lin-xiuer.gitee.io/categories/github/%E5%B7%A5%E5%85%B7/"},{"name":"javascript","slug":"javascript","permalink":"https://lin-xiuer.gitee.io/categories/javascript/"},{"name":"工具","slug":"工具","permalink":"https://lin-xiuer.gitee.io/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"前端面试","slug":"前端面试","permalink":"https://lin-xiuer.gitee.io/tags/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95/"},{"name":"八股文","slug":"八股文","permalink":"https://lin-xiuer.gitee.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"},{"name":"vue","slug":"vue","permalink":"https://lin-xiuer.gitee.io/tags/vue/"},{"name":"javascript","slug":"javascript","permalink":"https://lin-xiuer.gitee.io/tags/javascript/"},{"name":"vue2","slug":"vue2","permalink":"https://lin-xiuer.gitee.io/tags/vue2/"},{"name":"vue3","slug":"vue3","permalink":"https://lin-xiuer.gitee.io/tags/vue3/"},{"name":"threejs","slug":"threejs","permalink":"https://lin-xiuer.gitee.io/tags/threejs/"},{"name":"spring_boot","slug":"spring-boot","permalink":"https://lin-xiuer.gitee.io/tags/spring-boot/"},{"name":"webpack","slug":"webpack","permalink":"https://lin-xiuer.gitee.io/tags/webpack/"},{"name":"github","slug":"github","permalink":"https://lin-xiuer.gitee.io/tags/github/"},{"name":"(TortoiseGit)小乌龟","slug":"TortoiseGit-小乌龟","permalink":"https://lin-xiuer.gitee.io/tags/TortoiseGit-%E5%B0%8F%E4%B9%8C%E9%BE%9F/"},{"name":"工具","slug":"工具","permalink":"https://lin-xiuer.gitee.io/tags/%E5%B7%A5%E5%85%B7/"},{"name":"记录","slug":"记录","permalink":"https://lin-xiuer.gitee.io/tags/%E8%AE%B0%E5%BD%95/"},{"name":"hexo","slug":"hexo","permalink":"https://lin-xiuer.gitee.io/tags/hexo/"},{"name":"stun","slug":"stun","permalink":"https://lin-xiuer.gitee.io/tags/stun/"}]}